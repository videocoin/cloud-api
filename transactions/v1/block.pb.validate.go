// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transactions/v1/block.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on Block with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Block) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	// no validation rules for Number

	{
		tmp := m.GetTimestamp()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return BlockValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for NumTxs

	// no validation rules for GasUsed

	// no validation rules for GasLimit

	// no validation rules for Size

	return nil
}

// BlockValidationError is the validation error returned by Block.Validate if
// the designated constraints aren't met.
type BlockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockValidationError) ErrorName() string { return "BlockValidationError" }

// Error satisfies the builtin error interface
func (e BlockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockValidationError{}

// Validate checks the field values on BlockDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BlockDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	// no validation rules for ParentHash

	// no validation rules for Number

	{
		tmp := m.GetTimestamp()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return BlockDetailValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for GasUsed

	// no validation rules for GasLimit

	// no validation rules for Size

	// no validation rules for ExtraData

	return nil
}

// BlockDetailValidationError is the validation error returned by
// BlockDetail.Validate if the designated constraints aren't met.
type BlockDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockDetailValidationError) ErrorName() string { return "BlockDetailValidationError" }

// Error satisfies the builtin error interface
func (e BlockDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockDetailValidationError{}
