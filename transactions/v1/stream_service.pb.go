// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transactions/v1/stream_service.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetStreamInfoRequest struct {
	StreamId uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (m *GetStreamInfoRequest) Reset()         { *m = GetStreamInfoRequest{} }
func (m *GetStreamInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetStreamInfoRequest) ProtoMessage()    {}
func (*GetStreamInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorStreamService, []int{0}
}

func (m *GetStreamInfoRequest) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

type GetStreamInfoResponse struct {
	Stream *Stream `protobuf:"bytes,1,opt,name=stream" json:"stream,omitempty"`
}

func (m *GetStreamInfoResponse) Reset()         { *m = GetStreamInfoResponse{} }
func (m *GetStreamInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetStreamInfoResponse) ProtoMessage()    {}
func (*GetStreamInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorStreamService, []int{1}
}

func (m *GetStreamInfoResponse) GetStream() *Stream {
	if m != nil {
		return m.Stream
	}
	return nil
}

func init() {
	proto.RegisterType((*GetStreamInfoRequest)(nil), "cloud.api.transactions.v1.GetStreamInfoRequest")
	proto.RegisterType((*GetStreamInfoResponse)(nil), "cloud.api.transactions.v1.GetStreamInfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamService service

type StreamServiceClient interface {
	GetStreamInfo(ctx context.Context, in *GetStreamInfoRequest, opts ...grpc.CallOption) (*GetStreamInfoResponse, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) GetStreamInfo(ctx context.Context, in *GetStreamInfoRequest, opts ...grpc.CallOption) (*GetStreamInfoResponse, error) {
	out := new(GetStreamInfoResponse)
	err := grpc.Invoke(ctx, "/cloud.api.transactions.v1.StreamService/GetStreamInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	GetStreamInfo(context.Context, *GetStreamInfoRequest) (*GetStreamInfoResponse, error)
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_GetStreamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).GetStreamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.transactions.v1.StreamService/GetStreamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).GetStreamInfo(ctx, req.(*GetStreamInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.transactions.v1.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStreamInfo",
			Handler:    _StreamService_GetStreamInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions/v1/stream_service.proto",
}

func init() { proto.RegisterFile("transactions/v1/stream_service.proto", fileDescriptorStreamService) }

var fileDescriptorStreamService = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x29, 0x4a, 0xcc,
	0x2b, 0x4e, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0x2b, 0xd6, 0x2f, 0x33, 0xd4, 0x2f, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0x8d, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x92, 0x4c, 0xce, 0xc9, 0x2f, 0x4d, 0xd1, 0x4b, 0x2c, 0xc8, 0xd4, 0x43, 0x56, 0xaf, 0x57,
	0x66, 0x28, 0xa5, 0x9b, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x9e,
	0x9f, 0x9e, 0xaf, 0x0f, 0xd6, 0x91, 0x54, 0x9a, 0x06, 0xe6, 0x81, 0x39, 0x60, 0x16, 0xc4, 0x24,
	0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0xfd, 0xc4, 0x82, 0x4c, 0xfd, 0xc4, 0xbc, 0xbc,
	0xfc, 0x92, 0x44, 0x88, 0x49, 0x50, 0x59, 0xec, 0xae, 0x81, 0xc8, 0x2a, 0x19, 0x73, 0x89, 0xb8,
	0xa7, 0x96, 0x04, 0x83, 0x85, 0x3c, 0xf3, 0xd2, 0xf2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0xa4, 0xb9, 0x38, 0xa1, 0xae, 0xce, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0xe2,
	0x80, 0x08, 0x78, 0xa6, 0x28, 0x05, 0x71, 0x89, 0xa2, 0x69, 0x2a, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e,
	0x15, 0xb2, 0xe4, 0x62, 0x83, 0x28, 0x02, 0x6b, 0xe1, 0x36, 0x52, 0xd4, 0xc3, 0xe9, 0x49, 0x3d,
	0x88, 0xf6, 0x20, 0xa8, 0x06, 0xa3, 0xb5, 0x8c, 0x5c, 0xbc, 0x10, 0xa1, 0x60, 0x48, 0x30, 0x09,
	0xcd, 0x66, 0xe4, 0xe2, 0x45, 0xb1, 0x46, 0x48, 0x1f, 0x8f, 0x71, 0xd8, 0x7c, 0x21, 0x65, 0x40,
	0xbc, 0x06, 0x88, 0x0f, 0x94, 0xd4, 0x9b, 0x2e, 0x3f, 0x99, 0xcc, 0xa4, 0x28, 0x24, 0x0f, 0x0e,
	0x4d, 0x78, 0x68, 0xe9, 0x66, 0xe6, 0xa5, 0xe5, 0xeb, 0x57, 0xc3, 0x83, 0xa4, 0xd6, 0x49, 0xe4,
	0xc4, 0x23, 0x39, 0x86, 0x0b, 0x8f, 0xe4, 0x18, 0x1e, 0x3c, 0x92, 0x63, 0x98, 0xf1, 0x58, 0x8e,
	0x21, 0x8a, 0xa9, 0xcc, 0x30, 0x89, 0x0d, 0x1c, 0xaa, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x46, 0x22, 0x05, 0x9e, 0x03, 0x02, 0x00, 0x00,
}
