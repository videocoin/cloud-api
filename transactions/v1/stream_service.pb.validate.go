// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transactions/v1/stream_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on GetStreamInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetStreamInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StreamId

	return nil
}

// GetStreamInfoRequestValidationError is the validation error returned by
// GetStreamInfoRequest.Validate if the designated constraints aren't met.
type GetStreamInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStreamInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStreamInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStreamInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStreamInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStreamInfoRequestValidationError) ErrorName() string {
	return "GetStreamInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStreamInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStreamInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStreamInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStreamInfoRequestValidationError{}

// Validate checks the field values on GetStreamInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetStreamInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetStream()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return GetStreamInfoResponseValidationError{
					field:  "Stream",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// GetStreamInfoResponseValidationError is the validation error returned by
// GetStreamInfoResponse.Validate if the designated constraints aren't met.
type GetStreamInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStreamInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStreamInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStreamInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStreamInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStreamInfoResponseValidationError) ErrorName() string {
	return "GetStreamInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStreamInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStreamInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStreamInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStreamInfoResponseValidationError{}
