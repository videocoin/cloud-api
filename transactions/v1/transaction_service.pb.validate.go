// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transactions/v1/transaction_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on GetTransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransactionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// GetTransactionsRequestValidationError is the validation error returned by
// GetTransactionsRequest.Validate if the designated constraints aren't met.
type GetTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsRequestValidationError) ErrorName() string {
	return "GetTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsRequestValidationError{}

// Validate checks the field values on GetTransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransactionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetTransactionsResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// GetTransactionsResponseValidationError is the validation error returned by
// GetTransactionsResponse.Validate if the designated constraints aren't met.
type GetTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsResponseValidationError) ErrorName() string {
	return "GetTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsResponseValidationError{}

// Validate checks the field values on GetTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	return nil
}

// GetTransactionRequestValidationError is the validation error returned by
// GetTransactionRequest.Validate if the designated constraints aren't met.
type GetTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionRequestValidationError) ErrorName() string {
	return "GetTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionRequestValidationError{}

// Validate checks the field values on GetTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransactionResponse) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetTransaction()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return GetTransactionResponseValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// GetTransactionResponseValidationError is the validation error returned by
// GetTransactionResponse.Validate if the designated constraints aren't met.
type GetTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionResponseValidationError) ErrorName() string {
	return "GetTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionResponseValidationError{}

// Validate checks the field values on GetAllTransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllTransactionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// GetAllTransactionsRequestValidationError is the validation error returned by
// GetAllTransactionsRequest.Validate if the designated constraints aren't met.
type GetAllTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllTransactionsRequestValidationError) ErrorName() string {
	return "GetAllTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllTransactionsRequestValidationError{}

// Validate checks the field values on GetAllTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllTransactionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllTransactionsResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// GetAllTransactionsResponseValidationError is the validation error returned
// by GetAllTransactionsResponse.Validate if the designated constraints aren't met.
type GetAllTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllTransactionsResponseValidationError) ErrorName() string {
	return "GetAllTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllTransactionsResponseValidationError{}
