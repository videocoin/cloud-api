// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transactions/v1/block_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on GetBlocksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetBlocksRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// GetBlocksRequestValidationError is the validation error returned by
// GetBlocksRequest.Validate if the designated constraints aren't met.
type GetBlocksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlocksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlocksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlocksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlocksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlocksRequestValidationError) ErrorName() string { return "GetBlocksRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBlocksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlocksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlocksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlocksRequestValidationError{}

// Validate checks the field values on GetBlocksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetBlocksResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetBlocksResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// GetBlocksResponseValidationError is the validation error returned by
// GetBlocksResponse.Validate if the designated constraints aren't met.
type GetBlocksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlocksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlocksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlocksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlocksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlocksResponseValidationError) ErrorName() string {
	return "GetBlocksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlocksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlocksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlocksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlocksResponseValidationError{}

// Validate checks the field values on GetBlockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetBlockRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	return nil
}

// GetBlockRequestValidationError is the validation error returned by
// GetBlockRequest.Validate if the designated constraints aren't met.
type GetBlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockRequestValidationError) ErrorName() string { return "GetBlockRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockRequestValidationError{}

// Validate checks the field values on GetBlockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetBlockResponse) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetBlock()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return GetBlockResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// GetBlockResponseValidationError is the validation error returned by
// GetBlockResponse.Validate if the designated constraints aren't met.
type GetBlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockResponseValidationError) ErrorName() string { return "GetBlockResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockResponseValidationError{}
