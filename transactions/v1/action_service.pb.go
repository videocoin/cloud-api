// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transactions/v1/action_service.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetActionsRequest struct {
	Address string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Limit   uint64       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint64       `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Filter  []ActionType `protobuf:"varint,4,rep,packed,name=filter,enum=cloud.api.transactions.v1.ActionType" json:"filter,omitempty"`
}

func (m *GetActionsRequest) Reset()                    { *m = GetActionsRequest{} }
func (m *GetActionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetActionsRequest) ProtoMessage()               {}
func (*GetActionsRequest) Descriptor() ([]byte, []int) { return fileDescriptorActionService, []int{0} }

func (m *GetActionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetActionsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetActionsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetActionsRequest) GetFilter() []ActionType {
	if m != nil {
		return m.Filter
	}
	return nil
}

type GetActionsResponse struct {
	Actions []*Action `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
}

func (m *GetActionsResponse) Reset()                    { *m = GetActionsResponse{} }
func (m *GetActionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetActionsResponse) ProtoMessage()               {}
func (*GetActionsResponse) Descriptor() ([]byte, []int) { return fileDescriptorActionService, []int{1} }

func (m *GetActionsResponse) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type GetActionRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetActionRequest) Reset()                    { *m = GetActionRequest{} }
func (m *GetActionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetActionRequest) ProtoMessage()               {}
func (*GetActionRequest) Descriptor() ([]byte, []int) { return fileDescriptorActionService, []int{2} }

func (m *GetActionRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type GetActionResponse struct {
	Action *Action `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
}

func (m *GetActionResponse) Reset()                    { *m = GetActionResponse{} }
func (m *GetActionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetActionResponse) ProtoMessage()               {}
func (*GetActionResponse) Descriptor() ([]byte, []int) { return fileDescriptorActionService, []int{3} }

func (m *GetActionResponse) GetAction() *Action {
	if m != nil {
		return m.Action
	}
	return nil
}

type GetActionsByStreamIdRequest struct {
	StreamId uint64       `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Limit    uint64       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   uint64       `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Filter   []ActionType `protobuf:"varint,4,rep,packed,name=filter,enum=cloud.api.transactions.v1.ActionType" json:"filter,omitempty"`
}

func (m *GetActionsByStreamIdRequest) Reset()         { *m = GetActionsByStreamIdRequest{} }
func (m *GetActionsByStreamIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetActionsByStreamIdRequest) ProtoMessage()    {}
func (*GetActionsByStreamIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorActionService, []int{4}
}

func (m *GetActionsByStreamIdRequest) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *GetActionsByStreamIdRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetActionsByStreamIdRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetActionsByStreamIdRequest) GetFilter() []ActionType {
	if m != nil {
		return m.Filter
	}
	return nil
}

type GetActionsByStreamIdResponse struct {
	Actions []*Action `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
}

func (m *GetActionsByStreamIdResponse) Reset()         { *m = GetActionsByStreamIdResponse{} }
func (m *GetActionsByStreamIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetActionsByStreamIdResponse) ProtoMessage()    {}
func (*GetActionsByStreamIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorActionService, []int{5}
}

func (m *GetActionsByStreamIdResponse) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func init() {
	proto.RegisterType((*GetActionsRequest)(nil), "cloud.api.transactions.v1.GetActionsRequest")
	proto.RegisterType((*GetActionsResponse)(nil), "cloud.api.transactions.v1.GetActionsResponse")
	proto.RegisterType((*GetActionRequest)(nil), "cloud.api.transactions.v1.GetActionRequest")
	proto.RegisterType((*GetActionResponse)(nil), "cloud.api.transactions.v1.GetActionResponse")
	proto.RegisterType((*GetActionsByStreamIdRequest)(nil), "cloud.api.transactions.v1.GetActionsByStreamIdRequest")
	proto.RegisterType((*GetActionsByStreamIdResponse)(nil), "cloud.api.transactions.v1.GetActionsByStreamIdResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ActionService service

type ActionServiceClient interface {
	GetActions(ctx context.Context, in *GetActionsRequest, opts ...grpc.CallOption) (*GetActionsResponse, error)
	GetAction(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*GetActionResponse, error)
	GetActionsByStreamId(ctx context.Context, in *GetActionsByStreamIdRequest, opts ...grpc.CallOption) (*GetActionsByStreamIdResponse, error)
}

type actionServiceClient struct {
	cc *grpc.ClientConn
}

func NewActionServiceClient(cc *grpc.ClientConn) ActionServiceClient {
	return &actionServiceClient{cc}
}

func (c *actionServiceClient) GetActions(ctx context.Context, in *GetActionsRequest, opts ...grpc.CallOption) (*GetActionsResponse, error) {
	out := new(GetActionsResponse)
	err := grpc.Invoke(ctx, "/cloud.api.transactions.v1.ActionService/GetActions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) GetAction(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*GetActionResponse, error) {
	out := new(GetActionResponse)
	err := grpc.Invoke(ctx, "/cloud.api.transactions.v1.ActionService/GetAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) GetActionsByStreamId(ctx context.Context, in *GetActionsByStreamIdRequest, opts ...grpc.CallOption) (*GetActionsByStreamIdResponse, error) {
	out := new(GetActionsByStreamIdResponse)
	err := grpc.Invoke(ctx, "/cloud.api.transactions.v1.ActionService/GetActionsByStreamId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ActionService service

type ActionServiceServer interface {
	GetActions(context.Context, *GetActionsRequest) (*GetActionsResponse, error)
	GetAction(context.Context, *GetActionRequest) (*GetActionResponse, error)
	GetActionsByStreamId(context.Context, *GetActionsByStreamIdRequest) (*GetActionsByStreamIdResponse, error)
}

func RegisterActionServiceServer(s *grpc.Server, srv ActionServiceServer) {
	s.RegisterService(&_ActionService_serviceDesc, srv)
}

func _ActionService_GetActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).GetActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.transactions.v1.ActionService/GetActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).GetActions(ctx, req.(*GetActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_GetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).GetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.transactions.v1.ActionService/GetAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).GetAction(ctx, req.(*GetActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_GetActionsByStreamId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionsByStreamIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).GetActionsByStreamId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.transactions.v1.ActionService/GetActionsByStreamId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).GetActionsByStreamId(ctx, req.(*GetActionsByStreamIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ActionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.transactions.v1.ActionService",
	HandlerType: (*ActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActions",
			Handler:    _ActionService_GetActions_Handler,
		},
		{
			MethodName: "GetAction",
			Handler:    _ActionService_GetAction_Handler,
		},
		{
			MethodName: "GetActionsByStreamId",
			Handler:    _ActionService_GetActionsByStreamId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions/v1/action_service.proto",
}

func init() { proto.RegisterFile("transactions/v1/action_service.proto", fileDescriptorActionService) }

var fileDescriptorActionService = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0xc7, 0x9b, 0xb6, 0x76, 0xed, 0x13, 0x45, 0x43, 0xd5, 0xd9, 0x69, 0x2d, 0xdd, 0x41, 0xa5,
	0xe0, 0xee, 0x84, 0x56, 0x50, 0x44, 0x3c, 0xb8, 0x17, 0xf1, 0x22, 0x38, 0xeb, 0x49, 0x0f, 0x4b,
	0xda, 0x49, 0xa7, 0x81, 0x76, 0x32, 0x4e, 0xd2, 0xc2, 0x52, 0x7a, 0x11, 0xbc, 0x79, 0xf3, 0x22,
	0x7e, 0x01, 0x0f, 0x7e, 0x11, 0x8f, 0x82, 0x7e, 0x00, 0xa9, 0x7e, 0x10, 0x31, 0xc9, 0xcc, 0x56,
	0xb6, 0xea, 0x08, 0xe2, 0x2d, 0x2f, 0x79, 0xff, 0x7f, 0x7e, 0x2f, 0xf3, 0xde, 0xc0, 0x55, 0x95,
	0xd2, 0x58, 0xd2, 0xa1, 0xe2, 0x22, 0x96, 0x64, 0xde, 0x23, 0x66, 0x79, 0x28, 0x59, 0x3a, 0xe7,
	0x43, 0xe6, 0x27, 0xa9, 0x50, 0x02, 0x6f, 0x0f, 0x27, 0x62, 0x16, 0xfa, 0x34, 0xe1, 0xfe, 0x7a,
	0xbe, 0x3f, 0xef, 0xb9, 0x7b, 0x11, 0x57, 0xe3, 0xd9, 0xc0, 0x1f, 0x8a, 0x29, 0x89, 0x44, 0x24,
	0x88, 0x56, 0x0c, 0x66, 0x23, 0x1d, 0xe9, 0x40, 0xaf, 0x8c, 0x93, 0xdb, 0x8a, 0x84, 0x88, 0x26,
	0x8c, 0xd0, 0x84, 0x13, 0x1a, 0xc7, 0x42, 0x51, 0xe3, 0x64, 0x4f, 0x37, 0xd3, 0x98, 0x53, 0xef,
	0x2d, 0x82, 0x0b, 0x0f, 0x98, 0xba, 0x6f, 0x8e, 0x03, 0xf6, 0x7c, 0xc6, 0xa4, 0xc2, 0x0e, 0x6c,
	0xd1, 0x30, 0x4c, 0x99, 0x94, 0x0e, 0xea, 0xa0, 0x6e, 0x3d, 0xc8, 0x42, 0xdc, 0x80, 0x53, 0x13,
	0x3e, 0xe5, 0xca, 0x29, 0x77, 0x50, 0xb7, 0x1a, 0x98, 0x00, 0x5f, 0x82, 0x9a, 0x18, 0x8d, 0x24,
	0x53, 0x4e, 0x45, 0x6f, 0xdb, 0x08, 0xdf, 0x83, 0xda, 0x88, 0x4f, 0x14, 0x4b, 0x9d, 0x6a, 0xa7,
	0xd2, 0x3d, 0xd7, 0xbf, 0xe6, 0xff, 0xb2, 0x68, 0xdf, 0x20, 0x3c, 0x39, 0x4a, 0x58, 0x60, 0x45,
	0xde, 0x63, 0xc0, 0xeb, 0x6c, 0x32, 0x11, 0xb1, 0x64, 0xf8, 0x2e, 0x6c, 0x59, 0x99, 0x83, 0x3a,
	0x95, 0xee, 0x99, 0xfe, 0xce, 0x1f, 0x5d, 0x83, 0x4c, 0xe1, 0x5d, 0x87, 0xf3, 0xb9, 0x65, 0x56,
	0x2d, 0x86, 0xea, 0x98, 0xca, 0xb1, 0x2d, 0x55, 0xaf, 0xbd, 0x47, 0x6b, 0xcf, 0x92, 0xdf, 0x7c,
	0x07, 0x6a, 0xc6, 0x47, 0xa7, 0x16, 0xba, 0xd8, 0x0a, 0xbc, 0x77, 0x08, 0x9a, 0xc7, 0xb5, 0xec,
	0x1f, 0x1d, 0xa8, 0x94, 0xd1, 0xe9, 0xc3, 0x30, 0x63, 0x68, 0x42, 0x5d, 0xea, 0xad, 0x43, 0x1e,
	0x6a, 0xf7, 0x6a, 0x70, 0x5a, 0xda, 0x9c, 0xff, 0xfb, 0xe8, 0xcf, 0xa0, 0xb5, 0x19, 0xf4, 0x1f,
	0x3c, 0x7f, 0xff, 0x73, 0x05, 0xce, 0x9a, 0xbd, 0x03, 0x33, 0x0c, 0xf8, 0x15, 0x02, 0x38, 0xbe,
	0x0f, 0xef, 0xfe, 0xc6, 0xec, 0x44, 0x9f, 0xba, 0x7b, 0x05, 0xb3, 0x0d, 0xba, 0xb7, 0xf3, 0xe2,
	0xd3, 0xb7, 0xd7, 0xe5, 0x26, 0xde, 0xd6, 0xa3, 0x92, 0x8f, 0x82, 0x24, 0x0b, 0xdb, 0xde, 0x4b,
	0xfc, 0x12, 0x41, 0x3d, 0x57, 0xe2, 0x1b, 0x45, 0xfc, 0x33, 0x98, 0xdd, 0x62, 0xc9, 0x96, 0xe5,
	0x8a, 0x66, 0xb9, 0x8c, 0x2f, 0xfe, 0xcc, 0x42, 0x16, 0x3f, 0xda, 0x6f, 0x89, 0xdf, 0x23, 0x68,
	0x6c, 0xfa, 0x0c, 0xf8, 0x56, 0xa1, 0x92, 0x4f, 0x34, 0x98, 0x7b, 0xfb, 0xaf, 0x75, 0x16, 0xd4,
	0xd3, 0xa0, 0x2d, 0xec, 0x66, 0xa0, 0xa6, 0x2d, 0xc9, 0x22, 0xef, 0xd7, 0xe5, 0x7e, 0xe3, 0xc3,
	0xaa, 0x5d, 0xfa, 0xb8, 0x6a, 0x97, 0xbe, 0xac, 0xda, 0xa5, 0x37, 0x5f, 0xdb, 0xa5, 0xa7, 0xe5,
	0x79, 0x6f, 0x50, 0xd3, 0xbf, 0x98, 0x9b, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x2e, 0xbb,
	0xdd, 0x10, 0x05, 0x00, 0x00,
}
