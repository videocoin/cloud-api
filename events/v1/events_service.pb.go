// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events/v1/events_service.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import rpc "github.com/VideoCoin/cloud-api/rpc"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.events.v1.EventService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	Health(context.Context, *empty.Empty) (*rpc.HealthStatus, error)
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.events.v1.EventService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.events.v1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _EventService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events/v1/events_service.proto",
}

func init() {
	proto.RegisterFile("events/v1/events_service.proto", fileDescriptor_events_service_5cd35a880059c862)
}

var fileDescriptor_events_service_5cd35a880059c862 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0x2d, 0x4b, 0xcd,
	0x2b, 0x29, 0xd6, 0x2f, 0x33, 0xd4, 0x87, 0xb0, 0xe2, 0x8b, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53,
	0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0x93, 0x73, 0xf2, 0x4b, 0x53, 0xf4, 0x12, 0x0b,
	0x32, 0xf5, 0x20, 0xf2, 0x7a, 0x65, 0x86, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a,
	0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9, 0xe9, 0xf9, 0xfa, 0x60, 0xb5, 0x49, 0xa5, 0x69, 0x60, 0x1e,
	0x98, 0x03, 0x66, 0x41, 0xcc, 0x90, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0x45, 0xa8, 0x4a,
	0xcd, 0x2d, 0x28, 0xa9, 0x84, 0x4a, 0xca, 0x40, 0x25, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2,
	0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0xa1, 0xb2, 0xfa, 0x48, 0x36, 0x85, 0x65, 0xa6,
	0xa4, 0xe6, 0x3b, 0xe7, 0x67, 0xe6, 0xe9, 0x83, 0xdd, 0xa4, 0x0b, 0xd2, 0x51, 0x54, 0x90, 0xac,
	0x9f, 0x91, 0x9a, 0x98, 0x53, 0x92, 0x01, 0xd1, 0x60, 0x14, 0xcf, 0xc5, 0xe3, 0x0a, 0x72, 0x67,
	0x30, 0xc4, 0x17, 0x42, 0xfe, 0x5c, 0x6c, 0x1e, 0x60, 0x79, 0x21, 0x31, 0x3d, 0x88, 0x4d, 0x7a,
	0x30, 0x67, 0xe8, 0xb9, 0x82, 0x9c, 0x21, 0x25, 0xad, 0x87, 0xf0, 0x62, 0x51, 0x41, 0xb2, 0x1e,
	0x44, 0x79, 0x70, 0x49, 0x62, 0x49, 0x69, 0xb1, 0x92, 0x40, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0xb8,
	0x84, 0x38, 0xa0, 0xb6, 0x54, 0x39, 0x89, 0x9c, 0x78, 0x24, 0xc7, 0x70, 0xe1, 0x91, 0x1c, 0xc3,
	0x83, 0x47, 0x72, 0x0c, 0x33, 0x1e, 0xcb, 0x31, 0x44, 0x31, 0x95, 0x19, 0x26, 0xb1, 0x81, 0x0d,
	0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x31, 0x0c, 0x9c, 0x98, 0x4f, 0x01, 0x00, 0x00,
}
