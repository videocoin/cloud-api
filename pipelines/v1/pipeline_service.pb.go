// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pipelines/v1/pipeline_service.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v1 "github.com/VideoCoin/cloud-api/profiles/v1"
import rpc "github.com/VideoCoin/cloud-api/rpc"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreatePipelineRequest struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProfileId            v1.ProfileId `protobuf:"varint,2,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreatePipelineRequest) Reset()         { *m = CreatePipelineRequest{} }
func (m *CreatePipelineRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePipelineRequest) ProtoMessage()    {}
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_service_c4b4c012946525e4, []int{0}
}
func (m *CreatePipelineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePipelineRequest.Unmarshal(m, b)
}
func (m *CreatePipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePipelineRequest.Marshal(b, m, deterministic)
}
func (dst *CreatePipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePipelineRequest.Merge(dst, src)
}
func (m *CreatePipelineRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePipelineRequest.Size(m)
}
func (m *CreatePipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePipelineRequest proto.InternalMessageInfo

func (m *CreatePipelineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreatePipelineRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

type PipelineRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineRequest) Reset()         { *m = PipelineRequest{} }
func (m *PipelineRequest) String() string { return proto.CompactTextString(m) }
func (*PipelineRequest) ProtoMessage()    {}
func (*PipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_service_c4b4c012946525e4, []int{1}
}
func (m *PipelineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineRequest.Unmarshal(m, b)
}
func (m *PipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineRequest.Marshal(b, m, deterministic)
}
func (dst *PipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineRequest.Merge(dst, src)
}
func (m *PipelineRequest) XXX_Size() int {
	return xxx_messageInfo_PipelineRequest.Size(m)
}
func (m *PipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineRequest proto.InternalMessageInfo

func (m *PipelineRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListResponse struct {
	Items                []*PipelineProfile `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_service_c4b4c012946525e4, []int{2}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListResponse.Unmarshal(m, b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
}
func (dst *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(dst, src)
}
func (m *ListResponse) XXX_Size() int {
	return xxx_messageInfo_ListResponse.Size(m)
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetItems() []*PipelineProfile {
	if m != nil {
		return m.Items
	}
	return nil
}

type UpdatePipelineRequest struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               string         `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                 string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	StreamId             uint64         `protobuf:"varint,5,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StreamAddress        string         `protobuf:"bytes,6,opt,name=stream_address,json=streamAddress,proto3" json:"stream_address,omitempty"`
	Status               PipelineStatus `protobuf:"varint,7,opt,name=status,proto3,enum=cloud.api.pipelines.v1.PipelineStatus" json:"status,omitempty"`
	ProfileId            v1.ProfileId   `protobuf:"varint,8,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdatePipelineRequest) Reset()         { *m = UpdatePipelineRequest{} }
func (m *UpdatePipelineRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePipelineRequest) ProtoMessage()    {}
func (*UpdatePipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_service_c4b4c012946525e4, []int{3}
}
func (m *UpdatePipelineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePipelineRequest.Unmarshal(m, b)
}
func (m *UpdatePipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePipelineRequest.Marshal(b, m, deterministic)
}
func (dst *UpdatePipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePipelineRequest.Merge(dst, src)
}
func (m *UpdatePipelineRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePipelineRequest.Size(m)
}
func (m *UpdatePipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePipelineRequest proto.InternalMessageInfo

func (m *UpdatePipelineRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdatePipelineRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdatePipelineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePipelineRequest) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *UpdatePipelineRequest) GetStreamAddress() string {
	if m != nil {
		return m.StreamAddress
	}
	return ""
}

func (m *UpdatePipelineRequest) GetStatus() PipelineStatus {
	if m != nil {
		return m.Status
	}
	return PipelineStatusIdle
}

func (m *UpdatePipelineRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func init() {
	proto.RegisterType((*CreatePipelineRequest)(nil), "cloud.api.pipelines.v1.CreatePipelineRequest")
	proto.RegisterType((*PipelineRequest)(nil), "cloud.api.pipelines.v1.PipelineRequest")
	proto.RegisterType((*ListResponse)(nil), "cloud.api.pipelines.v1.ListResponse")
	proto.RegisterType((*UpdatePipelineRequest)(nil), "cloud.api.pipelines.v1.UpdatePipelineRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelineServiceClient interface {
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	Create(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error)
	Get(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	Update(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error)
	Run(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error)
	Complete(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error)
}

type pipelineServiceClient struct {
	cc *grpc.ClientConn
}

func NewPipelineServiceClient(cc *grpc.ClientConn) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) Create(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error) {
	out := new(PipelineProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) Get(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error) {
	out := new(PipelineProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) Update(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error) {
	out := new(PipelineProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) Run(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error) {
	out := new(PipelineProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) Complete(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (*PipelineProfile, error) {
	out := new(PipelineProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.pipelines.v1.PipelineService/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServiceServer is the server API for PipelineService service.
type PipelineServiceServer interface {
	Health(context.Context, *empty.Empty) (*rpc.HealthStatus, error)
	Create(context.Context, *CreatePipelineRequest) (*PipelineProfile, error)
	Get(context.Context, *PipelineRequest) (*PipelineProfile, error)
	List(context.Context, *empty.Empty) (*ListResponse, error)
	Update(context.Context, *UpdatePipelineRequest) (*PipelineProfile, error)
	Run(context.Context, *PipelineRequest) (*PipelineProfile, error)
	Complete(context.Context, *PipelineRequest) (*PipelineProfile, error)
}

func RegisterPipelineServiceServer(s *grpc.Server, srv PipelineServiceServer) {
	s.RegisterService(&_PipelineService_serviceDesc, srv)
}

func _PipelineService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Create(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Get(ctx, req.(*PipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Update(ctx, req.(*UpdatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Run(ctx, req.(*PipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.pipelines.v1.PipelineService/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).Complete(ctx, req.(*PipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PipelineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.pipelines.v1.PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _PipelineService_Health_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PipelineService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PipelineService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PipelineService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PipelineService_Update_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _PipelineService_Run_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _PipelineService_Complete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipelines/v1/pipeline_service.proto",
}

func init() {
	proto.RegisterFile("pipelines/v1/pipeline_service.proto", fileDescriptor_pipeline_service_c4b4c012946525e4)
}

var fileDescriptor_pipeline_service_c4b4c012946525e4 = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0x13, 0x3b,
	0x14, 0xce, 0x4c, 0xd2, 0x69, 0xe2, 0x7b, 0x6f, 0x6f, 0x31, 0x34, 0x0a, 0x49, 0x1b, 0x85, 0x69,
	0x81, 0x08, 0x29, 0x33, 0x4a, 0x59, 0x81, 0x04, 0xa8, 0xad, 0x10, 0x54, 0x02, 0x51, 0x4d, 0x05,
	0x0b, 0x36, 0xd5, 0x34, 0x76, 0x53, 0x4b, 0x93, 0xb1, 0xb1, 0x3d, 0x53, 0x0a, 0x2a, 0x02, 0x5e,
	0x81, 0x4d, 0x5f, 0x83, 0x2d, 0x2b, 0xc4, 0x8a, 0x25, 0x12, 0x2f, 0x80, 0x0a, 0x1b, 0xde, 0x02,
	0x8d, 0xed, 0xa1, 0xa1, 0x4d, 0x54, 0xba, 0xe8, 0xee, 0xd8, 0x3e, 0xdf, 0xf9, 0xce, 0xcf, 0x77,
	0x0c, 0xe6, 0x19, 0x61, 0x38, 0x22, 0x31, 0x16, 0x7e, 0xda, 0xf5, 0xf3, 0xc3, 0x86, 0xc0, 0x3c,
	0x25, 0x3d, 0xec, 0x31, 0x4e, 0x25, 0x85, 0xd5, 0x5e, 0x44, 0x13, 0xe4, 0x85, 0x8c, 0x78, 0xbf,
	0xdd, 0xbd, 0xb4, 0x5b, 0x6f, 0x8c, 0x04, 0x6b, 0x50, 0xdd, 0xef, 0x13, 0xb9, 0x9d, 0x6c, 0x7a,
	0x3d, 0x3a, 0xf0, 0x9f, 0x10, 0x84, 0xe9, 0x0a, 0x25, 0xb1, 0xaf, 0x22, 0x75, 0x42, 0x46, 0x7c,
	0xce, 0x7a, 0xfe, 0x36, 0x0e, 0x23, 0xb9, 0x6d, 0x00, 0x37, 0x4e, 0x00, 0x30, 0x4e, 0xb7, 0x48,
	0x64, 0xb8, 0x8c, 0x6d, 0xa0, 0x8d, 0x3e, 0xa5, 0xfd, 0x08, 0xfb, 0xea, 0xb4, 0x99, 0x6c, 0xf9,
	0x78, 0xc0, 0xe4, 0xae, 0x79, 0x9c, 0x35, 0x8f, 0x59, 0x8c, 0x30, 0x8e, 0xa9, 0x0c, 0x25, 0xa1,
	0x71, 0x0e, 0xed, 0x0c, 0xb1, 0xf6, 0x69, 0x9f, 0x1e, 0xc6, 0xc8, 0x4e, 0xea, 0xa0, 0x2c, 0xe3,
	0xbe, 0x34, 0xe4, 0x8e, 0xe3, 0x94, 0xee, 0x32, 0x4e, 0x9f, 0xef, 0x6a, 0x50, 0xaf, 0xd3, 0xc7,
	0x71, 0x27, 0x0d, 0x23, 0x82, 0x42, 0x89, 0xfd, 0x63, 0x86, 0x0e, 0xe1, 0xee, 0x80, 0x99, 0x15,
	0x8e, 0x43, 0x89, 0xd7, 0x4c, 0xc3, 0x02, 0xfc, 0x2c, 0xc1, 0x42, 0xc2, 0x39, 0x50, 0x8a, 0xc3,
	0x01, 0xae, 0x59, 0x2d, 0xab, 0x5d, 0x59, 0xae, 0x7c, 0xf8, 0xf9, 0xb1, 0x58, 0xe2, 0xf6, 0xb4,
	0x15, 0xa8, 0x6b, 0x78, 0x07, 0x00, 0x53, 0xf6, 0x06, 0x41, 0x35, 0xbb, 0x65, 0xb5, 0xa7, 0x16,
	0x5b, 0xde, 0xd0, 0x68, 0xf2, 0x9e, 0xa4, 0x5d, 0x6f, 0x4d, 0xdb, 0xab, 0x28, 0xa8, 0xb0, 0xdc,
	0x74, 0x2f, 0x81, 0xff, 0x8f, 0x52, 0x4e, 0x01, 0x9b, 0x20, 0x4d, 0x18, 0xd8, 0x04, 0xb9, 0x0f,
	0xc1, 0xbf, 0x0f, 0x88, 0x90, 0x01, 0x16, 0x8c, 0xc6, 0x02, 0xc3, 0x5b, 0x60, 0x82, 0x48, 0x3c,
	0x10, 0x35, 0xab, 0x55, 0x6c, 0xff, 0xb3, 0x78, 0xd5, 0x1b, 0xad, 0x04, 0x2f, 0x8f, 0x6b, 0x78,
	0x03, 0x8d, 0x72, 0xdf, 0xdb, 0x60, 0xe6, 0x31, 0x43, 0x23, 0x6a, 0xad, 0x1f, 0x12, 0x2f, 0x83,
	0xac, 0xd2, 0x09, 0x5e, 0xdc, 0xb7, 0x16, 0xb2, 0x24, 0xe0, 0x3c, 0x98, 0x4c, 0x04, 0xe6, 0x79,
	0x95, 0x7f, 0x3a, 0x38, 0xd9, 0xd3, 0x2a, 0x82, 0xd0, 0x34, 0xab, 0xa4, 0x72, 0xd7, 0x1d, 0x6a,
	0x80, 0x8a, 0x90, 0x1c, 0x87, 0x83, 0x0c, 0x3a, 0xd1, 0xb2, 0xda, 0xa5, 0xa0, 0xac, 0x2f, 0x56,
	0x11, 0xbc, 0x0c, 0xa6, 0xcc, 0x63, 0x88, 0x10, 0xc7, 0x42, 0xd4, 0x1c, 0x05, 0xfd, 0x4f, 0xdf,
	0x2e, 0xe9, 0x4b, 0x78, 0x1b, 0x38, 0x42, 0x86, 0x32, 0x11, 0xb5, 0x49, 0xd5, 0xe1, 0x2b, 0x27,
	0x95, 0xbc, 0xae, 0xbc, 0x03, 0x83, 0x3a, 0x32, 0xa5, 0xf2, 0xa9, 0xa7, 0xb4, 0xf8, 0xc9, 0x39,
	0x1c, 0xd3, 0xba, 0x5e, 0x43, 0xf8, 0x08, 0x38, 0xf7, 0xd5, 0xaa, 0xc0, 0xaa, 0xa7, 0xd5, 0xec,
	0xe5, 0x32, 0xf5, 0xee, 0x66, 0x52, 0xaf, 0x37, 0x86, 0x28, 0x38, 0xeb, 0x79, 0xda, 0x5d, 0xe7,
	0xe6, 0x4e, 0xbf, 0xfd, 0xfa, 0xe3, 0x9d, 0x0d, 0x60, 0xd9, 0x2c, 0xdc, 0x0b, 0xf8, 0x0a, 0x38,
	0x5a, 0x83, 0xb0, 0x33, 0xae, 0xbe, 0x91, 0x1a, 0xad, 0xff, 0xad, 0x02, 0xdc, 0x59, 0xc5, 0x59,
	0x75, 0xcf, 0xa9, 0xbd, 0x1b, 0xfa, 0x1e, 0xc4, 0x4d, 0xeb, 0x1a, 0xdc, 0x01, 0xc5, 0x7b, 0x58,
	0xc2, 0x13, 0xa3, 0x9d, 0x9a, 0xb6, 0xa9, 0x68, 0x6b, 0xb0, 0x7a, 0x8c, 0xd6, 0x7f, 0x49, 0xd0,
	0x1e, 0xdc, 0x00, 0xa5, 0x4c, 0xe0, 0x63, 0xfb, 0xb8, 0x30, 0x8e, 0x68, 0x78, 0x2d, 0xdc, 0x8b,
	0x8a, 0xe5, 0x3c, 0x3c, 0x5e, 0x1c, 0x7c, 0x6d, 0x01, 0x47, 0x4b, 0x7e, 0x7c, 0x6b, 0x47, 0xae,
	0xc4, 0xa9, 0x6b, 0xac, 0x8f, 0xab, 0x71, 0x0f, 0x14, 0x83, 0x24, 0x3e, 0x83, 0xe6, 0x2e, 0x28,
	0xe2, 0xa6, 0x3b, 0x3b, 0x9a, 0xd8, 0x17, 0x32, 0xe4, 0x12, 0xbe, 0xb1, 0x40, 0x79, 0x85, 0x0e,
	0x58, 0x84, 0x25, 0x3e, 0x83, 0x24, 0xe6, 0x55, 0x12, 0x73, 0x6e, 0x63, 0x6c, 0x12, 0x94, 0x2d,
	0x5f, 0xf8, 0x7c, 0xd0, 0x2c, 0x7c, 0x39, 0x68, 0x16, 0xbe, 0x1d, 0x34, 0x0b, 0xfb, 0xdf, 0x9b,
	0x85, 0xa7, 0x76, 0xda, 0xdd, 0x74, 0xd4, 0xb0, 0xaf, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x80,
	0x9d, 0xb4, 0x18, 0xf5, 0x06, 0x00, 0x00,
}
