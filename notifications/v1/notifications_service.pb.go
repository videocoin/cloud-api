// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notifications/v1/notifications_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	rpc "github.com/videocoin/cloud-api/rpc"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() {
	proto.RegisterFile("notifications/v1/notifications_service.proto", fileDescriptor_486b70dc91eaa483)
}
func init() {
	golang_proto.RegisterFile("notifications/v1/notifications_service.proto", fileDescriptor_486b70dc91eaa483)
}

var fileDescriptor_486b70dc91eaa483 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xc9, 0x1e, 0x16, 0xe9, 0x49, 0x2a, 0x88, 0x74, 0x25, 0x07, 0xcf, 0xee, 0x84, 0xd5,
	0x37, 0x50, 0x04, 0x4f, 0x7a, 0x58, 0xf0, 0xe0, 0x45, 0xd2, 0x6c, 0x9a, 0x06, 0xba, 0x99, 0xd0,
	0x4e, 0x0b, 0x7a, 0xf4, 0x15, 0x7c, 0x21, 0x8f, 0x7b, 0x14, 0x7c, 0x01, 0xe9, 0xfa, 0x20, 0xd2,
	0xa4, 0xb2, 0xbb, 0xb7, 0x4c, 0xe6, 0xfb, 0xe7, 0xff, 0xff, 0xe4, 0xd2, 0x21, 0xd9, 0xc2, 0x2a,
	0x49, 0x16, 0x5d, 0x23, 0xba, 0x85, 0x38, 0xf8, 0x78, 0x69, 0x74, 0xdd, 0x59, 0xa5, 0xc1, 0xd7,
	0x48, 0x98, 0x66, 0xaa, 0xc2, 0x76, 0x05, 0xd2, 0x5b, 0x38, 0xc0, 0xa0, 0x5b, 0x64, 0x33, 0x83,
	0x68, 0x2a, 0x2d, 0x02, 0x99, 0xb7, 0x85, 0xd0, 0x6b, 0x4f, 0xaf, 0x51, 0x98, 0x9d, 0x8f, 0x4b,
	0xe9, 0xad, 0x90, 0xce, 0x21, 0x8d, 0xba, 0xb8, 0x9d, 0x1b, 0x4b, 0x65, 0x9b, 0x83, 0xc2, 0xb5,
	0x30, 0x68, 0x70, 0x77, 0x63, 0x98, 0xc2, 0x10, 0x5e, 0x23, 0x2e, 0xf6, 0xf0, 0x27, 0xbb, 0xd2,
	0x78, 0x8b, 0xd6, 0x89, 0x10, 0x6d, 0x3e, 0x18, 0xd4, 0x5e, 0x89, 0x52, 0xcb, 0x8a, 0xca, 0x28,
	0xb8, 0x2a, 0x92, 0x93, 0x87, 0xbd, 0xb8, 0xcb, 0xd8, 0x29, 0x7d, 0x4c, 0xa6, 0xf7, 0x01, 0x4b,
	0x4f, 0x21, 0xe6, 0x83, 0x7f, 0x63, 0xb8, 0x1b, 0xc2, 0x67, 0x33, 0xd8, 0x15, 0xae, 0xbd, 0x82,
	0x88, 0x2f, 0x49, 0x52, 0xdb, 0x5c, 0x1c, 0xbf, 0x7f, 0xff, 0x7e, 0x4c, 0x92, 0xf4, 0x68, 0x34,
	0x7b, 0xbb, 0x39, 0xdb, 0xf4, 0x9c, 0x7d, 0xf5, 0x9c, 0xfd, 0xf4, 0x9c, 0x7d, 0x6e, 0x39, 0xdb,
	0x6c, 0x39, 0x7b, 0x9e, 0x74, 0x8b, 0x7c, 0x1a, 0x0e, 0x5f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x9d, 0x18, 0xed, 0xf2, 0x6f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationServiceClient interface {
	Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
}

type notificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotificationServiceClient(cc *grpc.ClientConn) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.notifications.v1.NotificationService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
type NotificationServiceServer interface {
	Health(context.Context, *types.Empty) (*rpc.HealthStatus, error)
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.notifications.v1.NotificationService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Health(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.notifications.v1.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _NotificationService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifications/v1/notifications_service.proto",
}
