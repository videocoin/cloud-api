// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dispatcher/v1/dispatcher_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	rpc "github.com/videocoin/cloud-api/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() {
	proto.RegisterFile("dispatcher/v1/dispatcher_service.proto", fileDescriptor_008866cbcf1626a3)
}
func init() {
	golang_proto.RegisterFile("dispatcher/v1/dispatcher_service.proto", fileDescriptor_008866cbcf1626a3)
}

var fileDescriptor_008866cbcf1626a3 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x31, 0x4e, 0xc4, 0x30,
	0x14, 0x44, 0x95, 0x2d, 0x56, 0x28, 0x15, 0xa4, 0x00, 0x94, 0x45, 0x2e, 0x28, 0xe8, 0xf6, 0x5b,
	0x81, 0x1b, 0x20, 0x90, 0xe8, 0x28, 0xb6, 0xa3, 0x41, 0x8e, 0x63, 0x1c, 0x4b, 0xd9, 0x7c, 0xcb,
	0xf9, 0xb1, 0x04, 0x25, 0x57, 0xe0, 0x42, 0x94, 0x5b, 0x22, 0x71, 0x01, 0x94, 0xe5, 0x20, 0x28,
	0x76, 0x20, 0x74, 0x1e, 0xcd, 0xf8, 0xfd, 0x99, 0xf4, 0xa2, 0x32, 0x9d, 0x15, 0x24, 0x6b, 0xe5,
	0xb8, 0x2f, 0xf8, 0xac, 0x1e, 0x3b, 0xe5, 0xbc, 0x91, 0x0a, 0xac, 0x43, 0xc2, 0xec, 0x44, 0x36,
	0xd8, 0x57, 0x20, 0xac, 0x81, 0x39, 0x03, 0xbe, 0xc8, 0xb9, 0x36, 0x54, 0xf7, 0x25, 0x48, 0xdc,
	0x72, 0x6f, 0x2a, 0x85, 0x12, 0x4d, 0xcb, 0x43, 0x7a, 0x2d, 0xac, 0xe1, 0xce, 0x4a, 0x5e, 0x2b,
	0xd1, 0x50, 0x1d, 0x49, 0xf9, 0x4a, 0x23, 0xea, 0x46, 0xf1, 0xa0, 0xca, 0xfe, 0x89, 0xab, 0xad,
	0xa5, 0xe7, 0xc9, 0x3c, 0x9b, 0xcc, 0xf1, 0xa7, 0x68, 0x5b, 0x24, 0x41, 0x06, 0xdb, 0x6e, 0x72,
	0xd7, 0xff, 0x6e, 0x69, 0xd4, 0x38, 0x33, 0x46, 0x15, 0x44, 0x78, 0xc5, 0xf8, 0x65, 0x95, 0x1e,
	0xdd, 0xfc, 0x75, 0xdd, 0xc4, 0x39, 0xd9, 0x7d, 0xba, 0xbc, 0x0b, 0x75, 0xb2, 0x63, 0x88, 0xc7,
	0xe0, 0x97, 0x02, 0xb7, 0x63, 0x93, 0x7c, 0x05, 0xf3, 0x56, 0x67, 0x25, 0xc4, 0xf8, 0x86, 0x04,
	0xf5, 0xdd, 0xf9, 0xe1, 0xeb, 0xe7, 0xf7, 0xdb, 0x22, 0xcd, 0x0e, 0xa6, 0x51, 0x2f, 0xd7, 0xa7,
	0xbb, 0x81, 0x25, 0x1f, 0x03, 0x4b, 0xbe, 0x06, 0x96, 0xbc, 0xef, 0x59, 0xb2, 0xdb, 0xb3, 0xe4,
	0x61, 0xe1, 0x8b, 0x72, 0x19, 0xc0, 0x57, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x13, 0x9d,
	0x68, 0x64, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DispatcherServiceClient is the client API for DispatcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispatcherServiceClient interface {
	Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
}

type dispatcherServiceClient struct {
	cc *grpc.ClientConn
}

func NewDispatcherServiceClient(cc *grpc.ClientConn) DispatcherServiceClient {
	return &dispatcherServiceClient{cc}
}

func (c *dispatcherServiceClient) Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.dispatcher.v1.DispatcherService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServiceServer is the server API for DispatcherService service.
type DispatcherServiceServer interface {
	Health(context.Context, *types.Empty) (*rpc.HealthStatus, error)
}

// UnimplementedDispatcherServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDispatcherServiceServer struct {
}

func (*UnimplementedDispatcherServiceServer) Health(ctx context.Context, req *types.Empty) (*rpc.HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}

func RegisterDispatcherServiceServer(s *grpc.Server, srv DispatcherServiceServer) {
	s.RegisterService(&_DispatcherService_serviceDesc, srv)
}

func _DispatcherService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.dispatcher.v1.DispatcherService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServiceServer).Health(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DispatcherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.dispatcher.v1.DispatcherService",
	HandlerType: (*DispatcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _DispatcherService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatcher/v1/dispatcher_service.proto",
}
