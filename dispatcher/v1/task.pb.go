// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dispatcher/v1/task.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	v1 "github.com/videocoin/cloud-api/profiles/v1"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TaskStatus int32

const (
	TaskStatusCreated   TaskStatus = 0
	TaskStatusPending   TaskStatus = 1
	TaskStatusAssigned  TaskStatus = 2
	TaskStatusEncoding  TaskStatus = 3
	TaskStatusCompleted TaskStatus = 4
	TaskStatusFailed    TaskStatus = 5
	TaskStatusCanceled  TaskStatus = 6
)

var TaskStatus_name = map[int32]string{
	0: "CREATED",
	1: "PENDING",
	2: "ASSIGNED",
	3: "ENCODING",
	4: "COMPLETED",
	5: "FAILED",
	6: "CANCELED",
}

var TaskStatus_value = map[string]int32{
	"CREATED":   0,
	"PENDING":   1,
	"ASSIGNED":  2,
	"ENCODING":  3,
	"COMPLETED": 4,
	"FAILED":    5,
	"CANCELED":  6,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}

func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9fa62cfa120fc1c4, []int{0}
}

type TaskInput struct {
	URI                  string   `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskInput) Reset()         { *m = TaskInput{} }
func (m *TaskInput) String() string { return proto.CompactTextString(m) }
func (*TaskInput) ProtoMessage()    {}
func (*TaskInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fa62cfa120fc1c4, []int{0}
}
func (m *TaskInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInput.Merge(m, src)
}
func (m *TaskInput) XXX_Size() int {
	return m.Size()
}
func (m *TaskInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInput.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInput proto.InternalMessageInfo

func (m *TaskInput) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (*TaskInput) XXX_MessageName() string {
	return "cloud.api.dispatcher.v1.TaskInput"
}

type TaskOutput struct {
	Codec                string   `protobuf:"bytes,1,opt,name=codec,proto3" json:"codec,omitempty"`
	Format               string   `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Width                uint32   `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32   `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Bitrate              uint32   `protobuf:"varint,5,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Framerate            uint32   `protobuf:"varint,6,opt,name=framerate,proto3" json:"framerate,omitempty"`
	GopSize              uint32   `protobuf:"varint,7,opt,name=gop_size,json=gopSize,proto3" json:"gop_size,omitempty"`
	ConstRateFactor      uint32   `protobuf:"varint,8,opt,name=const_rate_factor,json=constRateFactor,proto3" json:"const_rate_factor,omitempty"`
	MinRate              uint32   `protobuf:"varint,9,opt,name=min_rate,json=minRate,proto3" json:"min_rate,omitempty"`
	MaxRate              uint32   `protobuf:"varint,10,opt,name=max_rate,json=maxRate,proto3" json:"max_rate,omitempty"`
	BufSize              uint32   `protobuf:"varint,11,opt,name=buf_size,json=bufSize,proto3" json:"buf_size,omitempty"`
	Preset               string   `protobuf:"bytes,12,opt,name=preset,proto3" json:"preset,omitempty"`
	Profile              string   `protobuf:"bytes,13,opt,name=profile,proto3" json:"profile,omitempty"`
	ProfileLevel         string   `protobuf:"bytes,14,opt,name=profile_level,json=profileLevel,proto3" json:"profile_level,omitempty"`
	X264Opts             string   `protobuf:"bytes,15,opt,name=x264opts,proto3" json:"x264opts,omitempty"`
	SegmentTime          uint32   `protobuf:"varint,16,opt,name=segment_time,json=segmentTime,proto3" json:"segment_time,omitempty"`
	SegmentListSize      uint32   `protobuf:"varint,17,opt,name=segment_list_size,json=segmentListSize,proto3" json:"segment_list_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskOutput) Reset()         { *m = TaskOutput{} }
func (m *TaskOutput) String() string { return proto.CompactTextString(m) }
func (*TaskOutput) ProtoMessage()    {}
func (*TaskOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fa62cfa120fc1c4, []int{1}
}
func (m *TaskOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskOutput.Merge(m, src)
}
func (m *TaskOutput) XXX_Size() int {
	return m.Size()
}
func (m *TaskOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskOutput.DiscardUnknown(m)
}

var xxx_messageInfo_TaskOutput proto.InternalMessageInfo

func (m *TaskOutput) GetCodec() string {
	if m != nil {
		return m.Codec
	}
	return ""
}

func (m *TaskOutput) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *TaskOutput) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *TaskOutput) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TaskOutput) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *TaskOutput) GetFramerate() uint32 {
	if m != nil {
		return m.Framerate
	}
	return 0
}

func (m *TaskOutput) GetGopSize() uint32 {
	if m != nil {
		return m.GopSize
	}
	return 0
}

func (m *TaskOutput) GetConstRateFactor() uint32 {
	if m != nil {
		return m.ConstRateFactor
	}
	return 0
}

func (m *TaskOutput) GetMinRate() uint32 {
	if m != nil {
		return m.MinRate
	}
	return 0
}

func (m *TaskOutput) GetMaxRate() uint32 {
	if m != nil {
		return m.MaxRate
	}
	return 0
}

func (m *TaskOutput) GetBufSize() uint32 {
	if m != nil {
		return m.BufSize
	}
	return 0
}

func (m *TaskOutput) GetPreset() string {
	if m != nil {
		return m.Preset
	}
	return ""
}

func (m *TaskOutput) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func (m *TaskOutput) GetProfileLevel() string {
	if m != nil {
		return m.ProfileLevel
	}
	return ""
}

func (m *TaskOutput) GetX264Opts() string {
	if m != nil {
		return m.X264Opts
	}
	return ""
}

func (m *TaskOutput) GetSegmentTime() uint32 {
	if m != nil {
		return m.SegmentTime
	}
	return 0
}

func (m *TaskOutput) GetSegmentListSize() uint32 {
	if m != nil {
		return m.SegmentListSize
	}
	return 0
}

func (*TaskOutput) XXX_MessageName() string {
	return "cloud.api.dispatcher.v1.TaskOutput"
}

type Task struct {
	ID                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerID              int32            `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CreatedAt            *types.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status               TaskStatus       `protobuf:"varint,4,opt,name=status,proto3,enum=cloud.api.dispatcher.v1.TaskStatus" json:"status,omitempty"`
	ProfileID            v1.ProfileId     `protobuf:"varint,5,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	Input                *TaskInput       `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	Output               *TaskOutput      `protobuf:"bytes,7,opt,name=output,proto3" json:"output,omitempty"`
	Cmdline              string           `protobuf:"bytes,8,opt,name=cmdline,proto3" json:"cmdline,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fa62cfa120fc1c4, []int{2}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Task) GetOwnerID() int32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *Task) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Task) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatusCreated
}

func (m *Task) GetProfileID() v1.ProfileId {
	if m != nil {
		return m.ProfileID
	}
	return v1.ProfileNone
}

func (m *Task) GetInput() *TaskInput {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Task) GetOutput() *TaskOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Task) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

func (*Task) XXX_MessageName() string {
	return "cloud.api.dispatcher.v1.Task"
}
func init() {
	proto.RegisterEnum("cloud.api.dispatcher.v1.TaskStatus", TaskStatus_name, TaskStatus_value)
	golang_proto.RegisterEnum("cloud.api.dispatcher.v1.TaskStatus", TaskStatus_name, TaskStatus_value)
	proto.RegisterType((*TaskInput)(nil), "cloud.api.dispatcher.v1.TaskInput")
	golang_proto.RegisterType((*TaskInput)(nil), "cloud.api.dispatcher.v1.TaskInput")
	proto.RegisterType((*TaskOutput)(nil), "cloud.api.dispatcher.v1.TaskOutput")
	golang_proto.RegisterType((*TaskOutput)(nil), "cloud.api.dispatcher.v1.TaskOutput")
	proto.RegisterType((*Task)(nil), "cloud.api.dispatcher.v1.Task")
	golang_proto.RegisterType((*Task)(nil), "cloud.api.dispatcher.v1.Task")
}

func init() { proto.RegisterFile("dispatcher/v1/task.proto", fileDescriptor_9fa62cfa120fc1c4) }
func init() { golang_proto.RegisterFile("dispatcher/v1/task.proto", fileDescriptor_9fa62cfa120fc1c4) }

var fileDescriptor_9fa62cfa120fc1c4 = []byte{
	// 863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x0e, 0x25, 0xeb, 0x87, 0x2b, 0xdb, 0x91, 0xb7, 0xa9, 0xc3, 0x10, 0x81, 0xa4, 0x2a, 0x85,
	0x11, 0x04, 0x08, 0x05, 0xab, 0x45, 0xd1, 0xa0, 0x27, 0x59, 0xa2, 0x03, 0x02, 0xae, 0x6c, 0xd0,
	0xee, 0xa5, 0x17, 0x61, 0x45, 0xae, 0xa8, 0x45, 0x48, 0x2e, 0x41, 0x2e, 0x15, 0x23, 0x4f, 0x50,
	0xf8, 0x1d, 0x8c, 0x1e, 0x9a, 0xa7, 0xe8, 0xa9, 0xc7, 0x1c, 0xfb, 0x04, 0x46, 0xa1, 0xbc, 0x45,
	0x4f, 0xc5, 0xce, 0x92, 0x96, 0x60, 0xa0, 0xed, 0x6d, 0xbf, 0xf9, 0xbe, 0x99, 0x9d, 0x9d, 0xfd,
	0x06, 0x19, 0x3e, 0xcb, 0x12, 0x22, 0xbc, 0x25, 0x4d, 0x07, 0xab, 0xe3, 0x81, 0x20, 0xd9, 0x3b,
	0x2b, 0x49, 0xb9, 0xe0, 0xf8, 0xa9, 0x17, 0xf2, 0xdc, 0xb7, 0x48, 0xc2, 0xac, 0x8d, 0xc6, 0x5a,
	0x1d, 0x9b, 0xcf, 0x03, 0xce, 0x83, 0x90, 0x0e, 0x48, 0xc2, 0x06, 0x24, 0x8e, 0xb9, 0x20, 0x82,
	0xf1, 0x38, 0x53, 0x69, 0xe6, 0xeb, 0x80, 0x89, 0x65, 0x3e, 0xb7, 0x3c, 0x1e, 0x0d, 0x02, 0x1e,
	0xf0, 0x01, 0x84, 0xe7, 0xf9, 0x02, 0x10, 0x00, 0x38, 0x15, 0xf2, 0x6e, 0x51, 0xec, 0x5e, 0x25,
	0x58, 0x44, 0x33, 0x41, 0xa2, 0xa4, 0x10, 0xbc, 0xd9, 0xaa, 0xb7, 0x62, 0x3e, 0xe5, 0x1e, 0x67,
	0xf1, 0x00, 0x7a, 0x7b, 0x2d, 0x3b, 0x48, 0x52, 0xbe, 0x60, 0x21, 0xcd, 0x64, 0xf7, 0xe5, 0x59,
	0xa5, 0xf6, 0x8f, 0x90, 0x7e, 0x45, 0xb2, 0x77, 0x4e, 0x9c, 0xe4, 0x02, 0x3f, 0x43, 0xd5, 0x3c,
	0x65, 0x86, 0xd6, 0xd3, 0x5e, 0xea, 0x27, 0x8d, 0xf5, 0x5d, 0xb7, 0xfa, 0x93, 0xeb, 0xb8, 0x32,
	0xd6, 0xff, 0xbb, 0x8a, 0x90, 0x14, 0x9e, 0xe7, 0x42, 0x2a, 0x9f, 0xa0, 0x9a, 0xc7, 0x7d, 0xea,
	0x29, 0xad, 0xab, 0x00, 0x3e, 0x44, 0xf5, 0x05, 0x4f, 0x23, 0x22, 0x8c, 0x0a, 0x84, 0x0b, 0x24,
	0xd5, 0xef, 0x99, 0x2f, 0x96, 0x46, 0xb5, 0xa7, 0xbd, 0xdc, 0x73, 0x15, 0x90, 0xea, 0x25, 0x65,
	0xc1, 0x52, 0x18, 0x3b, 0x10, 0x2e, 0x10, 0x36, 0x50, 0x63, 0xce, 0x44, 0x4a, 0x04, 0x35, 0x6a,
	0x40, 0x94, 0x10, 0x3f, 0x47, 0xfa, 0x22, 0x25, 0x11, 0x05, 0xae, 0x0e, 0xdc, 0x26, 0x80, 0x9f,
	0xa1, 0x66, 0xc0, 0x93, 0x59, 0xc6, 0x3e, 0x50, 0xa3, 0xa1, 0x12, 0x03, 0x9e, 0x5c, 0xb2, 0x0f,
	0x14, 0xbf, 0x42, 0x07, 0x1e, 0x8f, 0x33, 0x31, 0x93, 0xc2, 0xd9, 0x82, 0x78, 0x82, 0xa7, 0x46,
	0x13, 0x34, 0x8f, 0x81, 0x70, 0x89, 0xa0, 0xa7, 0x10, 0x96, 0x65, 0x22, 0x16, 0x83, 0xd2, 0xd0,
	0x55, 0x99, 0x88, 0xc5, 0x6e, 0x71, 0x43, 0x44, 0xae, 0x15, 0x85, 0x0a, 0x8a, 0x5c, 0x97, 0xd4,
	0x3c, 0x5f, 0xa8, 0xcb, 0x5b, 0x45, 0xd7, 0xf9, 0x02, 0x2e, 0x3f, 0x44, 0xf5, 0x24, 0xa5, 0x19,
	0x15, 0xc6, 0xae, 0x9a, 0x8a, 0x42, 0xf2, 0x9d, 0xc5, 0x67, 0x18, 0x7b, 0x40, 0x94, 0x10, 0xbf,
	0x40, 0x7b, 0xc5, 0x71, 0x16, 0xd2, 0x15, 0x0d, 0x8d, 0x7d, 0xe0, 0x77, 0x8b, 0xe0, 0x99, 0x8c,
	0x61, 0x13, 0x35, 0xaf, 0x87, 0xdf, 0x7d, 0xcb, 0x13, 0x91, 0x19, 0x8f, 0x81, 0xbf, 0xc7, 0xf8,
	0x2b, 0xb4, 0x9b, 0xd1, 0x20, 0xa2, 0xb1, 0x98, 0x49, 0xaf, 0x18, 0x6d, 0xe8, 0xa8, 0x55, 0xc4,
	0xae, 0x58, 0x04, 0x23, 0x29, 0x25, 0x21, 0xcb, 0x84, 0xea, 0xfc, 0x40, 0x8d, 0xa4, 0x20, 0xce,
	0x58, 0x26, 0xe4, 0x0b, 0xfa, 0xbf, 0x56, 0xd1, 0x8e, 0xfc, 0x7c, 0x7c, 0x88, 0x2a, 0xcc, 0x2f,
	0xfc, 0x51, 0x5f, 0xdf, 0x75, 0x2b, 0xce, 0xc4, 0xad, 0x30, 0x1f, 0x1f, 0xa1, 0x26, 0x7f, 0x1f,
	0xd3, 0x74, 0xc6, 0x7c, 0xf8, 0xfa, 0xda, 0x49, 0x6b, 0x7d, 0xd7, 0x6d, 0x9c, 0xcb, 0x98, 0x33,
	0x71, 0x1b, 0x40, 0x3a, 0x3e, 0x7e, 0x83, 0x90, 0x97, 0x52, 0x22, 0xa8, 0x3f, 0x23, 0x02, 0xdc,
	0xd0, 0x1a, 0x9a, 0x96, 0xb2, 0xb7, 0x55, 0xda, 0xdb, 0xba, 0x2a, 0xed, 0xed, 0xea, 0x85, 0x7a,
	0x24, 0xf0, 0x0f, 0xa8, 0x9e, 0x09, 0x22, 0xf2, 0x0c, 0xdc, 0xb2, 0x3f, 0x7c, 0x61, 0xfd, 0xcb,
	0xee, 0x59, 0xb2, 0xd3, 0x4b, 0x90, 0xba, 0x45, 0x0a, 0x9e, 0x22, 0x54, 0x0e, 0x94, 0xf9, 0xe0,
	0xaa, 0xfd, 0x61, 0x6f, 0xab, 0xc0, 0xfd, 0x52, 0xac, 0x8e, 0xad, 0x0b, 0x75, 0x76, 0xfc, 0x93,
	0xbd, 0xf5, 0x5d, 0x57, 0x2f, 0xe1, 0xc4, 0xd5, 0x93, 0x92, 0xc1, 0xdf, 0xa3, 0x1a, 0x93, 0x1b,
	0x03, 0x26, 0x6c, 0x0d, 0xfb, 0xff, 0xd9, 0x0b, 0xec, 0x96, 0xab, 0x12, 0xe4, 0x33, 0x38, 0xac,
	0x10, 0x58, 0xb4, 0xf5, 0x3f, 0xcf, 0x50, 0xdb, 0xe6, 0x16, 0x29, 0xd2, 0x31, 0x5e, 0xe4, 0x87,
	0x2c, 0xa6, 0x60, 0x5e, 0xdd, 0x2d, 0xe1, 0xab, 0x8f, 0x15, 0xb5, 0x9e, 0xea, 0xdd, 0xb8, 0x8f,
	0x1a, 0x63, 0xd7, 0x1e, 0x5d, 0xd9, 0x93, 0xf6, 0x23, 0xf3, 0xcb, 0x9b, 0xdb, 0xde, 0xc1, 0x86,
	0x1c, 0xab, 0x91, 0x4a, 0xcd, 0x85, 0x3d, 0x9d, 0x38, 0xd3, 0xb7, 0x6d, 0xed, 0xa1, 0xe6, 0x82,
	0xc6, 0x3e, 0x8b, 0x03, 0xfc, 0x35, 0x6a, 0x8e, 0x2e, 0x2f, 0x9d, 0xb7, 0x53, 0x7b, 0xd2, 0xae,
	0x98, 0x87, 0x37, 0xb7, 0x3d, 0xbc, 0x11, 0x8d, 0xb2, 0x8c, 0x05, 0x31, 0xf5, 0xa5, 0xca, 0x9e,
	0x8e, 0xcf, 0xa1, 0x54, 0xf5, 0xa1, 0xca, 0x8e, 0x3d, 0x0e, 0xb5, 0x8e, 0x90, 0x3e, 0x3e, 0xff,
	0xf1, 0xe2, 0xcc, 0x96, 0x5d, 0xed, 0x98, 0x4f, 0x6f, 0x6e, 0x7b, 0x5f, 0x6c, 0x75, 0xc5, 0xa3,
	0x24, 0xa4, 0xb2, 0xaf, 0x1e, 0xaa, 0x9f, 0x8e, 0x9c, 0x33, 0x7b, 0xd2, 0xae, 0x99, 0x4f, 0x6e,
	0x6e, 0x7b, 0xed, 0x8d, 0xe8, 0x94, 0xb0, 0x50, 0xdd, 0x37, 0x1e, 0x4d, 0xc7, 0xb6, 0xd4, 0xd4,
	0x1f, 0xde, 0x37, 0x26, 0xb1, 0x47, 0x43, 0xea, 0x9b, 0xf8, 0x97, 0xdf, 0x3a, 0x8f, 0x7e, 0xff,
	0xd8, 0xd9, 0x9a, 0xcb, 0x89, 0xf1, 0x69, 0xdd, 0xd1, 0xfe, 0x5c, 0x77, 0xb4, 0xbf, 0xd6, 0x1d,
	0xed, 0x8f, 0xcf, 0x1d, 0xed, 0xd3, 0xe7, 0x8e, 0xf6, 0x73, 0x65, 0x75, 0x3c, 0xaf, 0x83, 0xfb,
	0xbe, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0x94, 0x0b, 0x61, 0x42, 0xec, 0x05, 0x00, 0x00,
}

func (m *TaskInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.URI) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TaskOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Codec) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Codec)))
		i += copy(dAtA[i:], m.Codec)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if m.Width != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Height))
	}
	if m.Bitrate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Bitrate))
	}
	if m.Framerate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Framerate))
	}
	if m.GopSize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.GopSize))
	}
	if m.ConstRateFactor != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ConstRateFactor))
	}
	if m.MinRate != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.MinRate))
	}
	if m.MaxRate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.MaxRate))
	}
	if m.BufSize != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.BufSize))
	}
	if len(m.Preset) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Preset)))
		i += copy(dAtA[i:], m.Preset)
	}
	if len(m.Profile) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Profile)))
		i += copy(dAtA[i:], m.Profile)
	}
	if len(m.ProfileLevel) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.ProfileLevel)))
		i += copy(dAtA[i:], m.ProfileLevel)
	}
	if len(m.X264Opts) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.X264Opts)))
		i += copy(dAtA[i:], m.X264Opts)
	}
	if m.SegmentTime != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.SegmentTime))
	}
	if m.SegmentListSize != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.SegmentListSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.OwnerID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.OwnerID))
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.CreatedAt.Size()))
		n1, err1 := m.CreatedAt.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Status))
	}
	if m.ProfileID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ProfileID))
	}
	if m.Input != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Input.Size()))
		n2, err2 := m.Input.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.Output != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Output.Size()))
		n3, err3 := m.Output.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if len(m.Cmdline) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Cmdline)))
		i += copy(dAtA[i:], m.Cmdline)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Codec)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovTask(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovTask(uint64(m.Height))
	}
	if m.Bitrate != 0 {
		n += 1 + sovTask(uint64(m.Bitrate))
	}
	if m.Framerate != 0 {
		n += 1 + sovTask(uint64(m.Framerate))
	}
	if m.GopSize != 0 {
		n += 1 + sovTask(uint64(m.GopSize))
	}
	if m.ConstRateFactor != 0 {
		n += 1 + sovTask(uint64(m.ConstRateFactor))
	}
	if m.MinRate != 0 {
		n += 1 + sovTask(uint64(m.MinRate))
	}
	if m.MaxRate != 0 {
		n += 1 + sovTask(uint64(m.MaxRate))
	}
	if m.BufSize != 0 {
		n += 1 + sovTask(uint64(m.BufSize))
	}
	l = len(m.Preset)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Profile)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.ProfileLevel)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.X264Opts)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.SegmentTime != 0 {
		n += 2 + sovTask(uint64(m.SegmentTime))
	}
	if m.SegmentListSize != 0 {
		n += 2 + sovTask(uint64(m.SegmentListSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.OwnerID != 0 {
		n += 1 + sovTask(uint64(m.OwnerID))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTask(uint64(m.Status))
	}
	if m.ProfileID != 0 {
		n += 1 + sovTask(uint64(m.ProfileID))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Cmdline)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitrate", wireType)
			}
			m.Bitrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bitrate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Framerate", wireType)
			}
			m.Framerate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Framerate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GopSize", wireType)
			}
			m.GopSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GopSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstRateFactor", wireType)
			}
			m.ConstRateFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstRateFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRate", wireType)
			}
			m.MinRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRate", wireType)
			}
			m.MaxRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufSize", wireType)
			}
			m.BufSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X264Opts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.X264Opts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentTime", wireType)
			}
			m.SegmentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentListSize", wireType)
			}
			m.SegmentListSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentListSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileID", wireType)
			}
			m.ProfileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileID |= v1.ProfileId(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &TaskInput{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &TaskOutput{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmdline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmdline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTask
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask   = fmt.Errorf("proto: integer overflow")
)
