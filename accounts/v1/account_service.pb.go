// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: accounts/v1/account_service.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import rpc "github.com/VideoCoin/cloud-api/rpc"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountRequest struct {
	OwnerID              string   `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountRequest) Reset()         { *m = AccountRequest{} }
func (m *AccountRequest) String() string { return proto.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()    {}
func (*AccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_service_aa8e1b0b69b5bdae, []int{0}
}
func (m *AccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountRequest.Unmarshal(m, b)
}
func (m *AccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountRequest.Marshal(b, m, deterministic)
}
func (dst *AccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountRequest.Merge(dst, src)
}
func (m *AccountRequest) XXX_Size() int {
	return xxx_messageInfo_AccountRequest.Size(m)
}
func (m *AccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountRequest proto.InternalMessageInfo

func (m *AccountRequest) GetOwnerID() string {
	if m != nil {
		return m.OwnerID
	}
	return ""
}

type Address struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_service_aa8e1b0b69b5bdae, []int{1}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (dst *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(dst, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ListResponse struct {
	Items                []*AccountProfile `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_service_aa8e1b0b69b5bdae, []int{2}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListResponse.Unmarshal(m, b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
}
func (dst *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(dst, src)
}
func (m *ListResponse) XXX_Size() int {
	return xxx_messageInfo_ListResponse.Size(m)
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetItems() []*AccountProfile {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AccountRequest)(nil), "cloud.api.account.v1.AccountRequest")
	proto.RegisterType((*Address)(nil), "cloud.api.account.v1.Address")
	proto.RegisterType((*ListResponse)(nil), "cloud.api.account.v1.ListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountServiceClient interface {
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	Create(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountProfile, error)
	Get(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountProfile, error)
	GetByAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AccountProfile, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	Refresh(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountProfile, error)
	Key(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountKey, error)
}

type accountServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountServiceClient(cc *grpc.ClientConn) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.account.v1.AccountService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Create(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountProfile, error) {
	out := new(AccountProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.account.v1.AccountService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Get(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountProfile, error) {
	out := new(AccountProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.account.v1.AccountService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetByAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AccountProfile, error) {
	out := new(AccountProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.account.v1.AccountService/GetByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.account.v1.AccountService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Refresh(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountProfile, error) {
	out := new(AccountProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.account.v1.AccountService/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Key(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountKey, error) {
	out := new(AccountKey)
	err := c.cc.Invoke(ctx, "/cloud.api.account.v1.AccountService/Key", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
type AccountServiceServer interface {
	Health(context.Context, *empty.Empty) (*rpc.HealthStatus, error)
	Create(context.Context, *AccountRequest) (*AccountProfile, error)
	Get(context.Context, *AccountRequest) (*AccountProfile, error)
	GetByAddress(context.Context, *Address) (*AccountProfile, error)
	List(context.Context, *empty.Empty) (*ListResponse, error)
	Refresh(context.Context, *AccountRequest) (*AccountProfile, error)
	Key(context.Context, *AccountRequest) (*AccountKey, error)
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.account.v1.AccountService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.account.v1.AccountService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Create(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.account.v1.AccountService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Get(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.account.v1.AccountService/GetByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetByAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.account.v1.AccountService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.account.v1.AccountService/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Refresh(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Key_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Key(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.account.v1.AccountService/Key",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Key(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.account.v1.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _AccountService_Health_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AccountService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccountService_Get_Handler,
		},
		{
			MethodName: "GetByAddress",
			Handler:    _AccountService_GetByAddress_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AccountService_List_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AccountService_Refresh_Handler,
		},
		{
			MethodName: "Key",
			Handler:    _AccountService_Key_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts/v1/account_service.proto",
}

func init() {
	proto.RegisterFile("accounts/v1/account_service.proto", fileDescriptor_account_service_aa8e1b0b69b5bdae)
}

var fileDescriptor_account_service_aa8e1b0b69b5bdae = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x51, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xde, 0x36, 0x31, 0x5b, 0xa7, 0x45, 0xca, 0x50, 0xa4, 0xa6, 0x1a, 0xeb, 0xa2, 0x12, 0x84,
	0xcc, 0x9a, 0x7a, 0x11, 0x6f, 0x49, 0x2b, 0xb5, 0x56, 0x88, 0x6c, 0xb0, 0x82, 0x97, 0x32, 0xd9,
	0x7d, 0xd9, 0x0c, 0x6c, 0x76, 0xd6, 0x99, 0xd9, 0xd5, 0xf5, 0xe8, 0x5f, 0xf0, 0xe2, 0x6f, 0xf1,
	0xe4, 0xd1, 0xa3, 0x20, 0x5e, 0x45, 0xa2, 0x17, 0xff, 0x85, 0xec, 0xce, 0x44, 0x03, 0x4d, 0x4b,
	0x0e, 0xb9, 0xbd, 0x99, 0xef, 0x7d, 0xdf, 0x7b, 0xdf, 0xfb, 0xd0, 0x2d, 0xea, 0xfb, 0x3c, 0x8d,
	0x95, 0x74, 0xb3, 0xb6, 0x6b, 0xea, 0x53, 0x09, 0x22, 0x63, 0x3e, 0x90, 0x44, 0x70, 0xc5, 0xf1,
	0x96, 0x1f, 0xf1, 0x34, 0x20, 0x34, 0x61, 0xc4, 0x34, 0x90, 0xac, 0x5d, 0xbf, 0x36, 0x87, 0xa8,
	0x09, 0x75, 0x37, 0x64, 0x6a, 0x94, 0x0e, 0x88, 0xcf, 0xc7, 0xee, 0x09, 0x0b, 0x80, 0xef, 0x73,
	0x16, 0xbb, 0xa5, 0x4a, 0x8b, 0x26, 0xcc, 0x15, 0x89, 0xef, 0x8e, 0x80, 0x46, 0x6a, 0x64, 0x08,
	0xad, 0x19, 0x42, 0xc8, 0x43, 0xee, 0x96, 0xdf, 0x83, 0x74, 0x58, 0xbe, 0xca, 0x47, 0x59, 0x99,
	0xf6, 0xce, 0x4c, 0x3b, 0xc4, 0x19, 0xcf, 0x13, 0xc1, 0xdf, 0xe6, 0x9a, 0xe4, 0xb7, 0x42, 0x88,
	0x5b, 0x19, 0x8d, 0x58, 0x40, 0x15, 0xb8, 0x67, 0x0a, 0x23, 0xb1, 0x13, 0x72, 0x1e, 0x46, 0xf0,
	0x7f, 0x10, 0x8c, 0x13, 0x95, 0x1b, 0xf0, 0xba, 0x01, 0x8b, 0x5d, 0x69, 0x1c, 0x73, 0x45, 0x15,
	0xe3, 0xb1, 0xd4, 0xa8, 0xf3, 0x10, 0x5d, 0xe9, 0x68, 0xbb, 0x1e, 0xbc, 0x4e, 0x41, 0x2a, 0x7c,
	0x17, 0xad, 0xf1, 0x37, 0x31, 0x88, 0x53, 0x16, 0x6c, 0xaf, 0xec, 0xae, 0x34, 0x2f, 0x77, 0xd7,
	0x27, 0x3f, 0x6e, 0xda, 0xbd, 0xe2, 0xef, 0xe8, 0xc0, 0xb3, 0x4b, 0xf0, 0x28, 0x70, 0xee, 0x23,
	0xbb, 0x13, 0x04, 0x02, 0xa4, 0xc4, 0x77, 0x90, 0x4d, 0x75, 0x39, 0x65, 0x7c, 0xfa, 0xf3, 0xb9,
	0x52, 0x13, 0xd5, 0xcd, 0xe6, 0xf6, 0x3d, 0x6f, 0x8a, 0x39, 0x4f, 0xd1, 0xc6, 0x33, 0x26, 0x95,
	0x07, 0x32, 0xe1, 0xb1, 0x04, 0xfc, 0x08, 0x5d, 0x62, 0x0a, 0xc6, 0x05, 0xa9, 0xd2, 0x5c, 0xdf,
	0xbb, 0x4d, 0xe6, 0x45, 0x43, 0xcc, 0x7a, 0xcf, 0x05, 0x1f, 0xb2, 0x08, 0x3c, 0x4d, 0xd9, 0xfb,
	0x5e, 0xfd, 0xb7, 0x78, 0x5f, 0xe7, 0x8b, 0x7b, 0xa8, 0xf6, 0xa4, 0xcc, 0x01, 0x5f, 0x25, 0xda,
	0x33, 0x99, 0x1e, 0x84, 0x3c, 0x2e, 0x0e, 0x52, 0xdf, 0x99, 0x99, 0x20, 0x12, 0x9f, 0xe8, 0xf6,
	0xbe, 0xa2, 0x2a, 0x95, 0xce, 0xe6, 0xfb, 0x6f, 0xbf, 0x3f, 0xac, 0x22, 0xbc, 0x66, 0xd2, 0x7c,
	0x87, 0x4f, 0x50, 0x6d, 0x5f, 0x00, 0x55, 0x80, 0x2f, 0x5e, 0xcd, 0x5c, 0xae, 0xbe, 0x90, 0x01,
	0xc7, 0xc2, 0x7d, 0x54, 0x39, 0x04, 0xb5, 0x64, 0xd1, 0x17, 0x68, 0xe3, 0x10, 0x54, 0x37, 0x9f,
	0x66, 0x72, 0xe3, 0x1c, 0x9e, 0x86, 0x17, 0x96, 0x3d, 0x40, 0xd5, 0x22, 0xb3, 0x73, 0x4f, 0xea,
	0xcc, 0xd7, 0x99, 0xcd, 0xd9, 0xb1, 0xf0, 0x4b, 0x64, 0x7b, 0x30, 0x14, 0x20, 0x47, 0x4b, 0x76,
	0xdd, 0x43, 0x95, 0x63, 0xc8, 0x17, 0x14, 0xdd, 0xbd, 0xb0, 0xeb, 0x18, 0x72, 0xc7, 0xea, 0x6e,
	0x7d, 0x99, 0x34, 0xac, 0xaf, 0x93, 0x86, 0xf5, 0x73, 0xd2, 0xb0, 0x3e, 0xfe, 0x6a, 0x58, 0xaf,
	0x56, 0xb3, 0xf6, 0xa0, 0x56, 0xba, 0x7e, 0xf0, 0x37, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x81, 0xf0,
	0x10, 0x60, 0x04, 0x00, 0x00,
}
