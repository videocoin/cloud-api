// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: accounts/v1/account.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Account) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 36 {
		return AccountValidationError{
			field:  "Id",
			reason: "value length must be 36 runes",
		}

	}

	if utf8.RuneCountInString(m.GetUserId()) != 36 {
		return AccountValidationError{
			field:  "UserId",
			reason: "value length must be 36 runes",
		}

	}

	if l := utf8.RuneCountInString(m.GetAddress()); l < 40 || l > 42 {
		return AccountValidationError{
			field:  "Address",
			reason: "value length must be between 40 and 42 runes, inclusive",
		}
	}

	// no validation rules for Key

	if m.GetBalance() < 0 {
		return AccountValidationError{
			field:  "Balance",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on AccountProfile with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AccountProfile) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Address

	// no validation rules for Balance

	return nil
}

// AccountProfileValidationError is the validation error returned by
// AccountProfile.Validate if the designated constraints aren't met.
type AccountProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountProfileValidationError) ErrorName() string { return "AccountProfileValidationError" }

// Error satisfies the builtin error interface
func (e AccountProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountProfileValidationError{}

// Validate checks the field values on AccountKey with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AccountKey) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for Key

	return nil
}

// AccountKeyValidationError is the validation error returned by
// AccountKey.Validate if the designated constraints aren't met.
type AccountKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountKeyValidationError) ErrorName() string { return "AccountKeyValidationError" }

// Error satisfies the builtin error interface
func (e AccountKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountKeyValidationError{}
