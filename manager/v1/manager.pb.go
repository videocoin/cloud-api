// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: manager/v1/manager.proto

package v1

import (
	context "context"
	fmt "fmt"
	v1 "github.com/VideoCoin/cloud-api/profiles/v1"
	rpc "github.com/VideoCoin/cloud-api/rpc"
	v12 "github.com/VideoCoin/cloud-api/transcoder/v1"
	v11 "github.com/VideoCoin/cloud-api/workorder/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpdateProfileRequest struct {
	StreamId             int64        `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ProfileId            v1.ProfileId `protobuf:"varint,2,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateProfileRequest) Reset()         { *m = UpdateProfileRequest{} }
func (m *UpdateProfileRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateProfileRequest) ProtoMessage()    {}
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{0}
}
func (m *UpdateProfileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateProfileRequest.Unmarshal(m, b)
}
func (m *UpdateProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateProfileRequest.Marshal(b, m, deterministic)
}
func (m *UpdateProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProfileRequest.Merge(m, src)
}
func (m *UpdateProfileRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateProfileRequest.Size(m)
}
func (m *UpdateProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProfileRequest proto.InternalMessageInfo

func (m *UpdateProfileRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *UpdateProfileRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

type Heartbeat struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{1}
}
func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Heartbeat.Unmarshal(m, b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
}
func (m *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(m, src)
}
func (m *Heartbeat) XXX_Size() int {
	return xxx_messageInfo_Heartbeat.Size(m)
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ProfileRequest struct {
	ProfileId            v1.ProfileId `protobuf:"varint,2,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ProfileRequest) Reset()         { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string { return proto.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()    {}
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{2}
}
func (m *ProfileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileRequest.Unmarshal(m, b)
}
func (m *ProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileRequest.Marshal(b, m, deterministic)
}
func (m *ProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileRequest.Merge(m, src)
}
func (m *ProfileRequest) XXX_Size() int {
	return xxx_messageInfo_ProfileRequest.Size(m)
}
func (m *ProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileRequest proto.InternalMessageInfo

func (m *ProfileRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

type CheckBalanceRequest struct {
	ContractAddress      string   `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckBalanceRequest) Reset()         { *m = CheckBalanceRequest{} }
func (m *CheckBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*CheckBalanceRequest) ProtoMessage()    {}
func (*CheckBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{3}
}
func (m *CheckBalanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckBalanceRequest.Unmarshal(m, b)
}
func (m *CheckBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckBalanceRequest.Marshal(b, m, deterministic)
}
func (m *CheckBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBalanceRequest.Merge(m, src)
}
func (m *CheckBalanceRequest) XXX_Size() int {
	return xxx_messageInfo_CheckBalanceRequest.Size(m)
}
func (m *CheckBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBalanceRequest proto.InternalMessageInfo

func (m *CheckBalanceRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type CheckBalanceResponse struct {
	Balance              float64  `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckBalanceResponse) Reset()         { *m = CheckBalanceResponse{} }
func (m *CheckBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*CheckBalanceResponse) ProtoMessage()    {}
func (*CheckBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{4}
}
func (m *CheckBalanceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckBalanceResponse.Unmarshal(m, b)
}
func (m *CheckBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckBalanceResponse.Marshal(b, m, deterministic)
}
func (m *CheckBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBalanceResponse.Merge(m, src)
}
func (m *CheckBalanceResponse) XXX_Size() int {
	return xxx_messageInfo_CheckBalanceResponse.Size(m)
}
func (m *CheckBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBalanceResponse proto.InternalMessageInfo

func (m *CheckBalanceResponse) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type ContractAddrRequest struct {
	StreamId             int64    `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ContractAddress      string   `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContractAddrRequest) Reset()         { *m = ContractAddrRequest{} }
func (m *ContractAddrRequest) String() string { return proto.CompactTextString(m) }
func (*ContractAddrRequest) ProtoMessage()    {}
func (*ContractAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{5}
}
func (m *ContractAddrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContractAddrRequest.Unmarshal(m, b)
}
func (m *ContractAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContractAddrRequest.Marshal(b, m, deterministic)
}
func (m *ContractAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractAddrRequest.Merge(m, src)
}
func (m *ContractAddrRequest) XXX_Size() int {
	return xxx_messageInfo_ContractAddrRequest.Size(m)
}
func (m *ContractAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractAddrRequest proto.InternalMessageInfo

func (m *ContractAddrRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *ContractAddrRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type VerifyChunkRequest struct {
	StreamId             int64    `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SourceChunkId        uint64   `protobuf:"varint,2,opt,name=source_chunk_id,json=sourceChunkId,proto3" json:"source_chunk_id,omitempty"`
	ResultChunkId        uint64   `protobuf:"varint,3,opt,name=result_chunk_id,json=resultChunkId,proto3" json:"result_chunk_id,omitempty"`
	HashDistance         int32    `protobuf:"varint,4,opt,name=hash_distance,json=hashDistance,proto3" json:"hash_distance,omitempty"`
	Bitrate              uint32   `protobuf:"varint,5,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyChunkRequest) Reset()         { *m = VerifyChunkRequest{} }
func (m *VerifyChunkRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyChunkRequest) ProtoMessage()    {}
func (*VerifyChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{6}
}
func (m *VerifyChunkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyChunkRequest.Unmarshal(m, b)
}
func (m *VerifyChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyChunkRequest.Marshal(b, m, deterministic)
}
func (m *VerifyChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyChunkRequest.Merge(m, src)
}
func (m *VerifyChunkRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyChunkRequest.Size(m)
}
func (m *VerifyChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyChunkRequest proto.InternalMessageInfo

func (m *VerifyChunkRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *VerifyChunkRequest) GetSourceChunkId() uint64 {
	if m != nil {
		return m.SourceChunkId
	}
	return 0
}

func (m *VerifyChunkRequest) GetResultChunkId() uint64 {
	if m != nil {
		return m.ResultChunkId
	}
	return 0
}

func (m *VerifyChunkRequest) GetHashDistance() int32 {
	if m != nil {
		return m.HashDistance
	}
	return 0
}

func (m *VerifyChunkRequest) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

type ChunkCreatedRequest struct {
	StreamId             int64    `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SourceChunkId        int64    `protobuf:"varint,2,opt,name=source_chunk_id,json=sourceChunkId,proto3" json:"source_chunk_id,omitempty"`
	ResultChunkId        int64    `protobuf:"varint,3,opt,name=result_chunk_id,json=resultChunkId,proto3" json:"result_chunk_id,omitempty"`
	Bitrate              uint32   `protobuf:"varint,4,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkCreatedRequest) Reset()         { *m = ChunkCreatedRequest{} }
func (m *ChunkCreatedRequest) String() string { return proto.CompactTextString(m) }
func (*ChunkCreatedRequest) ProtoMessage()    {}
func (*ChunkCreatedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{7}
}
func (m *ChunkCreatedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkCreatedRequest.Unmarshal(m, b)
}
func (m *ChunkCreatedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkCreatedRequest.Marshal(b, m, deterministic)
}
func (m *ChunkCreatedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkCreatedRequest.Merge(m, src)
}
func (m *ChunkCreatedRequest) XXX_Size() int {
	return xxx_messageInfo_ChunkCreatedRequest.Size(m)
}
func (m *ChunkCreatedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkCreatedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkCreatedRequest proto.InternalMessageInfo

func (m *ChunkCreatedRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *ChunkCreatedRequest) GetSourceChunkId() int64 {
	if m != nil {
		return m.SourceChunkId
	}
	return 0
}

func (m *ChunkCreatedRequest) GetResultChunkId() int64 {
	if m != nil {
		return m.ResultChunkId
	}
	return 0
}

func (m *ChunkCreatedRequest) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

type TranscoderStatusRequest struct {
	TranscoderId         string   `protobuf:"bytes,1,opt,name=transcoder_id,json=transcoderId,proto3" json:"transcoder_id,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TranscoderStatusRequest) Reset()         { *m = TranscoderStatusRequest{} }
func (m *TranscoderStatusRequest) String() string { return proto.CompactTextString(m) }
func (*TranscoderStatusRequest) ProtoMessage()    {}
func (*TranscoderStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{8}
}
func (m *TranscoderStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranscoderStatusRequest.Unmarshal(m, b)
}
func (m *TranscoderStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranscoderStatusRequest.Marshal(b, m, deterministic)
}
func (m *TranscoderStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranscoderStatusRequest.Merge(m, src)
}
func (m *TranscoderStatusRequest) XXX_Size() int {
	return xxx_messageInfo_TranscoderStatusRequest.Size(m)
}
func (m *TranscoderStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TranscoderStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TranscoderStatusRequest proto.InternalMessageInfo

func (m *TranscoderStatusRequest) GetTranscoderId() string {
	if m != nil {
		return m.TranscoderId
	}
	return ""
}

func (m *TranscoderStatusRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type StreamStatusRequest struct {
	TranscoderId         string           `protobuf:"bytes,1,opt,name=transcoder_id,json=transcoderId,proto3" json:"transcoder_id,omitempty"`
	StreamId             int64            `protobuf:"varint,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Status               string           `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Refunded             bool             `protobuf:"varint,4,opt,name=refunded,proto3" json:"refunded,omitempty"`
	IngestStatus         v11.IngestStatus `protobuf:"varint,5,opt,name=ingest_status,json=ingestStatus,proto3,enum=cloud.api.workorder.v1.IngestStatus" json:"ingest_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StreamStatusRequest) Reset()         { *m = StreamStatusRequest{} }
func (m *StreamStatusRequest) String() string { return proto.CompactTextString(m) }
func (*StreamStatusRequest) ProtoMessage()    {}
func (*StreamStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{9}
}
func (m *StreamStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamStatusRequest.Unmarshal(m, b)
}
func (m *StreamStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamStatusRequest.Marshal(b, m, deterministic)
}
func (m *StreamStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamStatusRequest.Merge(m, src)
}
func (m *StreamStatusRequest) XXX_Size() int {
	return xxx_messageInfo_StreamStatusRequest.Size(m)
}
func (m *StreamStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamStatusRequest proto.InternalMessageInfo

func (m *StreamStatusRequest) GetTranscoderId() string {
	if m != nil {
		return m.TranscoderId
	}
	return ""
}

func (m *StreamStatusRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *StreamStatusRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *StreamStatusRequest) GetRefunded() bool {
	if m != nil {
		return m.Refunded
	}
	return false
}

func (m *StreamStatusRequest) GetIngestStatus() v11.IngestStatus {
	if m != nil {
		return m.IngestStatus
	}
	return v11.IngestStatusNone
}

type JobResponse struct {
	RtmpInputUrl         string   `protobuf:"bytes,1,opt,name=rtmp_input_url,json=rtmpInputUrl,proto3" json:"rtmp_input_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobResponse) Reset()         { *m = JobResponse{} }
func (m *JobResponse) String() string { return proto.CompactTextString(m) }
func (*JobResponse) ProtoMessage()    {}
func (*JobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{10}
}
func (m *JobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobResponse.Unmarshal(m, b)
}
func (m *JobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobResponse.Marshal(b, m, deterministic)
}
func (m *JobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobResponse.Merge(m, src)
}
func (m *JobResponse) XXX_Size() int {
	return xxx_messageInfo_JobResponse.Size(m)
}
func (m *JobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobResponse proto.InternalMessageInfo

func (m *JobResponse) GetRtmpInputUrl() string {
	if m != nil {
		return m.RtmpInputUrl
	}
	return ""
}

type JobRequest struct {
	PipelineId           string       `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	ProfileId            v1.ProfileId `protobuf:"varint,3,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *JobRequest) Reset()         { *m = JobRequest{} }
func (m *JobRequest) String() string { return proto.CompactTextString(m) }
func (*JobRequest) ProtoMessage()    {}
func (*JobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{11}
}
func (m *JobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobRequest.Unmarshal(m, b)
}
func (m *JobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobRequest.Marshal(b, m, deterministic)
}
func (m *JobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRequest.Merge(m, src)
}
func (m *JobRequest) XXX_Size() int {
	return xxx_messageInfo_JobRequest.Size(m)
}
func (m *JobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobRequest proto.InternalMessageInfo

func (m *JobRequest) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *JobRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

type UpdateJobRequest struct {
	PipelineId           string       `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	ProfileId            v1.ProfileId `protobuf:"varint,2,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	Address              string       `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	StreamId             int64        `protobuf:"varint,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StreamAddress        string       `protobuf:"bytes,5,opt,name=stream_address,json=streamAddress,proto3" json:"stream_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateJobRequest) Reset()         { *m = UpdateJobRequest{} }
func (m *UpdateJobRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateJobRequest) ProtoMessage()    {}
func (*UpdateJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{12}
}
func (m *UpdateJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateJobRequest.Unmarshal(m, b)
}
func (m *UpdateJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateJobRequest.Marshal(b, m, deterministic)
}
func (m *UpdateJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJobRequest.Merge(m, src)
}
func (m *UpdateJobRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateJobRequest.Size(m)
}
func (m *UpdateJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJobRequest proto.InternalMessageInfo

func (m *UpdateJobRequest) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *UpdateJobRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func (m *UpdateJobRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdateJobRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *UpdateJobRequest) GetStreamAddress() string {
	if m != nil {
		return m.StreamAddress
	}
	return ""
}

type StreamRequest struct {
	StreamId             int64    `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02ccd723715ff49, []int{13}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func init() {
	proto.RegisterType((*UpdateProfileRequest)(nil), "cloud.api.manager.v1.UpdateProfileRequest")
	proto.RegisterType((*Heartbeat)(nil), "cloud.api.manager.v1.Heartbeat")
	proto.RegisterType((*ProfileRequest)(nil), "cloud.api.manager.v1.ProfileRequest")
	proto.RegisterType((*CheckBalanceRequest)(nil), "cloud.api.manager.v1.CheckBalanceRequest")
	proto.RegisterType((*CheckBalanceResponse)(nil), "cloud.api.manager.v1.CheckBalanceResponse")
	proto.RegisterType((*ContractAddrRequest)(nil), "cloud.api.manager.v1.ContractAddrRequest")
	proto.RegisterType((*VerifyChunkRequest)(nil), "cloud.api.manager.v1.VerifyChunkRequest")
	proto.RegisterType((*ChunkCreatedRequest)(nil), "cloud.api.manager.v1.ChunkCreatedRequest")
	proto.RegisterType((*TranscoderStatusRequest)(nil), "cloud.api.manager.v1.TranscoderStatusRequest")
	proto.RegisterType((*StreamStatusRequest)(nil), "cloud.api.manager.v1.StreamStatusRequest")
	proto.RegisterType((*JobResponse)(nil), "cloud.api.manager.v1.JobResponse")
	proto.RegisterType((*JobRequest)(nil), "cloud.api.manager.v1.JobRequest")
	proto.RegisterType((*UpdateJobRequest)(nil), "cloud.api.manager.v1.UpdateJobRequest")
	proto.RegisterType((*StreamRequest)(nil), "cloud.api.manager.v1.StreamRequest")
}

func init() { proto.RegisterFile("manager/v1/manager.proto", fileDescriptor_e02ccd723715ff49) }

var fileDescriptor_e02ccd723715ff49 = []byte{
	// 1334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4d, 0x6f, 0x1b, 0x55,
	0x17, 0xce, 0xd8, 0x49, 0xde, 0xe4, 0x24, 0x76, 0xa3, 0x9b, 0xbc, 0x25, 0x75, 0x8a, 0x63, 0x6e,
	0xd2, 0xc8, 0x0d, 0x64, 0xa6, 0x6e, 0x25, 0x10, 0x5f, 0x82, 0x26, 0xa0, 0x36, 0x45, 0x08, 0xe4,
	0xd0, 0x2e, 0x90, 0x2a, 0x33, 0x9e, 0xb9, 0xb1, 0xa7, 0x71, 0xe6, 0x4e, 0xef, 0xdc, 0x71, 0x9b,
	0x56, 0xdd, 0x54, 0x42, 0x2c, 0x58, 0x21, 0x16, 0x20, 0xf1, 0x03, 0x10, 0x7f, 0x81, 0x15, 0x4b,
	0x96, 0x08, 0x24, 0xd6, 0x50, 0xd8, 0xf0, 0x2f, 0xd0, 0xdc, 0x0f, 0xcf, 0x78, 0xec, 0x49, 0x93,
	0xd2, 0xdd, 0xdc, 0x8f, 0x73, 0x9e, 0xe7, 0x7c, 0xdc, 0xe3, 0xc7, 0xb0, 0x7c, 0x68, 0xfb, 0x76,
	0x87, 0x30, 0xab, 0xdf, 0xb0, 0xd4, 0xa7, 0x19, 0x30, 0xca, 0x29, 0x5a, 0x72, 0x7a, 0x34, 0x72,
	0x4d, 0x3b, 0xf0, 0x4c, 0x7d, 0xd0, 0x6f, 0x54, 0xac, 0x8e, 0xc7, 0xbb, 0x51, 0xdb, 0x74, 0xe8,
	0xa1, 0x75, 0xcb, 0x73, 0x09, 0xdd, 0xa1, 0x9e, 0x6f, 0x89, 0xab, 0x5b, 0x76, 0xe0, 0x59, 0x2c,
	0x70, 0xac, 0x2e, 0xb1, 0x7b, 0xbc, 0x2b, 0xdd, 0x54, 0x56, 0x3a, 0x94, 0x76, 0x7a, 0xc4, 0x12,
	0xab, 0x76, 0xb4, 0x6f, 0x91, 0xc3, 0x80, 0x1f, 0xa9, 0xc3, 0xf3, 0xea, 0x30, 0xb6, 0xb4, 0x7d,
	0x9f, 0x72, 0x9b, 0x7b, 0xd4, 0x0f, 0xd5, 0xe9, 0x56, 0x0a, 0xab, 0x43, 0x3b, 0x34, 0xf1, 0x11,
	0xaf, 0xc4, 0x42, 0x7c, 0xa9, 0xeb, 0x57, 0x53, 0xd7, 0x89, 0xdf, 0xa7, 0x47, 0x01, 0xa3, 0xf7,
	0x8f, 0xa4, 0x91, 0xb3, 0xd5, 0x21, 0xfe, 0x56, 0xdf, 0xee, 0x79, 0xae, 0xcd, 0x89, 0x35, 0xf2,
	0xa1, 0x5c, 0xbc, 0xfe, 0x94, 0xe8, 0x02, 0x46, 0xf7, 0xbd, 0x1e, 0x09, 0xe3, 0x6c, 0xe9, 0x6f,
	0x65, 0xfa, 0xe6, 0x53, 0x4c, 0xef, 0x51, 0x76, 0x40, 0x99, 0x2b, 0x33, 0x3d, 0x58, 0x28, 0xe3,
	0xb7, 0x9f, 0x62, 0xcc, 0x99, 0xed, 0x87, 0x0e, 0x55, 0xd6, 0xc9, 0x4a, 0x9a, 0xe3, 0x2f, 0x0d,
	0x58, 0xba, 0x19, 0xc4, 0x71, 0x7c, 0x2c, 0x49, 0x35, 0xc9, 0xdd, 0x88, 0x84, 0x1c, 0x6d, 0xc0,
	0x6c, 0xc8, 0x19, 0xb1, 0x0f, 0x5b, 0x9e, 0xbb, 0x6c, 0xd4, 0x8c, 0x7a, 0x71, 0x7b, 0xf6, 0xc7,
	0x7f, 0x7e, 0x2a, 0x4e, 0xe2, 0x42, 0x7d, 0xa2, 0x39, 0x23, 0xcf, 0x76, 0x5d, 0xf4, 0x01, 0x80,
	0x0a, 0x27, 0xbe, 0x58, 0xa8, 0x19, 0xf5, 0xf2, 0xe5, 0x9a, 0x99, 0x34, 0xc0, 0x20, 0xd6, 0x7e,
	0xc3, 0x54, 0x10, 0xbb, 0xee, 0x36, 0xc4, 0xae, 0xa6, 0x1e, 0x1b, 0x85, 0x05, 0xa3, 0x39, 0x1b,
	0xe8, 0x6d, 0xbc, 0x02, 0xb3, 0xd7, 0x89, 0xcd, 0x78, 0x9b, 0xd8, 0x1c, 0x95, 0xa1, 0xa0, 0xa0,
	0x67, 0x9b, 0x05, 0xcf, 0xc5, 0xb7, 0xa1, 0x9c, 0xe1, 0xf8, 0x5c, 0xb1, 0xdf, 0x85, 0xc5, 0x9d,
	0x2e, 0x71, 0x0e, 0xb6, 0xed, 0x9e, 0xed, 0x3b, 0x03, 0x8c, 0x8b, 0xb0, 0xe0, 0x50, 0x9f, 0x33,
	0xdb, 0xe1, 0x2d, 0xdb, 0x75, 0x19, 0x09, 0x43, 0xc5, 0xe9, 0x8c, 0xde, 0xbf, 0x2a, 0xb7, 0xf1,
	0x25, 0x58, 0x1a, 0xf6, 0x10, 0x06, 0xd4, 0x0f, 0x09, 0x5a, 0x86, 0xff, 0xb5, 0xe5, 0x96, 0xb0,
	0x34, 0x9a, 0x7a, 0x89, 0x6f, 0xc3, 0xe2, 0x4e, 0xca, 0x89, 0xc6, 0x5c, 0x19, 0xc9, 0x7d, 0x2a,
	0xe1, 0xe3, 0x08, 0x15, 0xc6, 0x13, 0xfa, 0xd3, 0x00, 0x74, 0x8b, 0x30, 0x6f, 0xff, 0x68, 0xa7,
	0x1b, 0xf9, 0x07, 0x27, 0x28, 0x6d, 0x2d, 0x5d, 0xda, 0x06, 0x9c, 0x09, 0x69, 0xc4, 0x1c, 0xd2,
	0x72, 0x62, 0x73, 0x9d, 0xe3, 0x49, 0x75, 0xfb, 0x72, 0xdc, 0x08, 0x25, 0x79, 0x43, 0xf8, 0x97,
	0x26, 0x8c, 0x84, 0x51, 0x8f, 0x27, 0x26, 0xc5, 0x11, 0x13, 0x79, 0x43, 0x9b, 0xac, 0x41, 0xa9,
	0x6b, 0x87, 0xdd, 0x96, 0xeb, 0x85, 0x5c, 0xe4, 0x68, 0xb2, 0x66, 0xd4, 0xa7, 0x9a, 0xf3, 0xf1,
	0xe6, 0x7b, 0x6a, 0x4f, 0xa4, 0xd0, 0xe3, 0xcc, 0xe6, 0x64, 0x79, 0xaa, 0x66, 0xd4, 0x4b, 0x4d,
	0xbd, 0xc4, 0xdf, 0x1b, 0x71, 0xdd, 0x22, 0xff, 0x60, 0x87, 0x11, 0x9b, 0x13, 0xf7, 0xb4, 0x41,
	0x6e, 0x8c, 0x0f, 0xb2, 0x98, 0x8d, 0x6c, 0x63, 0x7c, 0x64, 0xc5, 0x6c, 0x38, 0x29, 0xa6, 0x93,
	0xc3, 0x4c, 0x6f, 0xc1, 0x0b, 0x9f, 0x0c, 0x9e, 0xdf, 0x1e, 0xb7, 0x79, 0x14, 0x6a, 0xb2, 0x6b,
	0x50, 0x4a, 0x5e, 0x66, 0x6b, 0xd0, 0xf5, 0xf3, 0xc9, 0xe6, 0xae, 0x8b, 0xce, 0xc2, 0x74, 0x28,
	0xac, 0x54, 0xb9, 0xd5, 0x0a, 0xff, 0x6e, 0xc0, 0xe2, 0x9e, 0x08, 0xe7, 0x19, 0x9c, 0x0e, 0xb5,
	0x5a, 0x21, 0xd3, 0x6a, 0x09, 0x62, 0x31, 0x8d, 0x88, 0x2a, 0x30, 0xc3, 0xc8, 0x7e, 0xe4, 0xbb,
	0xc4, 0x15, 0x41, 0xce, 0x34, 0x07, 0x6b, 0xb4, 0x0b, 0x25, 0xcf, 0xef, 0x90, 0x90, 0xb7, 0x94,
	0xe9, 0x94, 0x78, 0x96, 0xeb, 0xa9, 0x67, 0x99, 0x8c, 0xb0, 0x7e, 0xc3, 0xdc, 0x15, 0x97, 0x15,
	0xf3, 0x79, 0x2f, 0xb5, 0xc2, 0x57, 0x60, 0xee, 0x06, 0x6d, 0x0f, 0x9e, 0xd1, 0x3a, 0x94, 0x19,
	0x3f, 0x0c, 0x5a, 0x9e, 0x1f, 0x44, 0xbc, 0x15, 0xb1, 0x9e, 0x0e, 0x28, 0xde, 0xdd, 0x8d, 0x37,
	0x6f, 0xb2, 0x1e, 0x7e, 0x00, 0x20, 0x8c, 0x64, 0x0e, 0x56, 0x61, 0x2e, 0xf0, 0x02, 0xd2, 0xf3,
	0x7c, 0x92, 0x64, 0x00, 0xf4, 0xd6, 0xc8, 0xf8, 0x2a, 0xfe, 0xb7, 0x11, 0xf2, 0xab, 0x01, 0x0b,
	0x72, 0x98, 0x9e, 0x86, 0xc2, 0x3b, 0xcf, 0x32, 0xc5, 0x52, 0xb0, 0x71, 0xcb, 0xe9, 0x41, 0x20,
	0xeb, 0xa4, 0x97, 0xc3, 0xd5, 0x9d, 0xcc, 0x54, 0xf7, 0x02, 0x94, 0xd5, 0xa1, 0xb6, 0x9e, 0x12,
	0xd6, 0x25, 0xb9, 0xab, 0x87, 0xc8, 0x2b, 0x50, 0x92, 0xdd, 0x75, 0x92, 0xe9, 0x74, 0xf9, 0x87,
	0x05, 0x28, 0x7f, 0x28, 0x7f, 0xf3, 0xf7, 0x08, 0xeb, 0x7b, 0x0e, 0x41, 0x77, 0x60, 0x5a, 0xbe,
	0x4d, 0x94, 0x8e, 0x2a, 0x11, 0x06, 0x66, 0x92, 0xac, 0x0a, 0xce, 0x6b, 0x93, 0x1b, 0xb4, 0xad,
	0x62, 0xc7, 0x95, 0xc7, 0xbf, 0xfd, 0xfd, 0x75, 0x61, 0x09, 0x9f, 0x11, 0xbf, 0xfd, 0xfd, 0x86,
	0x75, 0x87, 0xb6, 0x2d, 0x9f, 0xdc, 0x7b, 0xc3, 0xd8, 0x44, 0x0c, 0x8a, 0xcd, 0xc8, 0x7f, 0x4e,
	0x40, 0x17, 0x04, 0xd0, 0x2a, 0x7e, 0x31, 0x0d, 0xf4, 0x30, 0x55, 0xcc, 0x47, 0x16, 0x8b, 0x7c,
	0xe4, 0x43, 0xf1, 0x1a, 0xe1, 0xcf, 0x09, 0xf3, 0x25, 0x81, 0xb9, 0x82, 0xce, 0xe5, 0x62, 0xa2,
	0x7b, 0x30, 0x2d, 0x9b, 0x0c, 0x6d, 0x8c, 0x87, 0xcc, 0xb6, 0xe0, 0x69, 0x80, 0x2b, 0xc7, 0x00,
	0x47, 0x00, 0x7b, 0x9c, 0x06, 0xb2, 0x1b, 0xd0, 0xda, 0x78, 0xf0, 0xa1, 0x5e, 0xa9, 0x9c, 0x35,
	0xa5, 0x4c, 0x33, 0xb5, 0xfe, 0x32, 0xdf, 0x8f, 0x35, 0x1c, 0xde, 0x14, 0x68, 0xeb, 0x78, 0x55,
	0xa3, 0xc9, 0x06, 0xb2, 0x42, 0x4e, 0x03, 0xeb, 0xe1, 0xa0, 0xbd, 0x1e, 0xc5, 0x35, 0xfd, 0x08,
	0xa6, 0xaf, 0x0b, 0x59, 0x88, 0x72, 0xbc, 0x55, 0x56, 0x52, 0x54, 0x58, 0xe0, 0x98, 0xf2, 0xba,
	0x9a, 0x22, 0x0b, 0x02, 0x0a, 0xd0, 0x8c, 0x12, 0x97, 0x0f, 0xd0, 0x7d, 0x98, 0xbd, 0x46, 0xf8,
	0x69, 0xc2, 0x38, 0x49, 0x02, 0xb1, 0xc0, 0x39, 0x8f, 0x2a, 0x99, 0x90, 0x52, 0xd1, 0xa0, 0x2f,
	0x0c, 0x40, 0xb2, 0x3a, 0xe9, 0x81, 0x8d, 0x2e, 0x1e, 0xc7, 0x61, 0x68, 0xa8, 0xe7, 0x26, 0xd4,
	0x14, 0xe8, 0x75, 0xbc, 0x96, 0x8f, 0x1e, 0x7f, 0xc7, 0xae, 0x44, 0x52, 0xef, 0xc0, 0x5c, 0x4a,
	0x19, 0xa0, 0xfa, 0x78, 0x06, 0xa3, 0xe2, 0x21, 0x97, 0xc0, 0x39, 0x41, 0x60, 0x11, 0x97, 0x35,
	0x81, 0xbe, 0xb0, 0x8d, 0xb1, 0xbe, 0x1b, 0x44, 0x9d, 0x16, 0x3b, 0x79, 0x51, 0x8f, 0x11, 0x44,
	0xb9, 0xa0, 0xdb, 0x02, 0xf4, 0x2d, 0xfc, 0x9a, 0x06, 0xcd, 0x2a, 0xa3, 0xe1, 0xf8, 0xb3, 0xa7,
	0x22, 0x13, 0x9f, 0x1b, 0x00, 0x57, 0x5d, 0x57, 0x95, 0x11, 0x6d, 0x1e, 0xf7, 0xa6, 0x86, 0xf5,
	0x67, 0x2e, 0xad, 0x2b, 0x82, 0xd6, 0x16, 0xae, 0x6b, 0x5a, 0x6a, 0x56, 0x0f, 0xb3, 0x49, 0x86,
	0xbe, 0xe0, 0x11, 0xc2, 0x7c, 0x5a, 0xc7, 0xe4, 0xa6, 0x67, 0x54, 0xeb, 0xe4, 0xf2, 0xa8, 0x09,
	0x1e, 0x15, 0xfc, 0xff, 0x41, 0x7a, 0x84, 0x74, 0x71, 0xa4, 0x75, 0x0c, 0xfa, 0x95, 0x11, 0xa3,
	0x26, 0x9a, 0x35, 0x1f, 0x75, 0x44, 0x19, 0x57, 0x36, 0x4f, 0x72, 0x55, 0xfe, 0x76, 0xeb, 0xf7,
	0x8e, 0xb0, 0x66, 0xa2, 0x14, 0xf0, 0x98, 0x9a, 0xa0, 0xcf, 0x60, 0xee, 0x1a, 0xe1, 0x2a, 0xd5,
	0x61, 0xee, 0xa3, 0x5f, 0x3d, 0xfe, 0x27, 0x32, 0xc4, 0xcb, 0x02, 0x13, 0xa1, 0x85, 0x4c, 0x15,
	0x42, 0x74, 0x1f, 0x20, 0x41, 0x40, 0xeb, 0xe3, 0xe3, 0xc8, 0xd4, 0xba, 0x7a, 0x3c, 0x1c, 0x5e,
	0x17, 0x68, 0x55, 0x74, 0x7e, 0xa4, 0xe6, 0xa9, 0x3a, 0xa3, 0xbb, 0x80, 0x9a, 0xa4, 0xe3, 0x85,
	0x9c, 0xb0, 0x44, 0x0b, 0x0e, 0xcd, 0xa0, 0xd4, 0x3f, 0xb4, 0x7e, 0xc3, 0x4c, 0x2e, 0xe5, 0x16,
	0xb9, 0x2a, 0x80, 0x97, 0xf1, 0xa2, 0x06, 0x4e, 0x3c, 0x84, 0x71, 0x89, 0xbf, 0x31, 0xe0, 0xac,
	0xec, 0xde, 0xac, 0xfa, 0x44, 0x5b, 0xe3, 0x23, 0xcf, 0x51, 0xa9, 0xb9, 0x0c, 0x5e, 0x15, 0x0c,
	0x2e, 0xe1, 0x97, 0x47, 0x19, 0x58, 0x0f, 0x87, 0x24, 0xe8, 0xd0, 0x0c, 0xda, 0x5e, 0xfa, 0xf9,
	0x49, 0x75, 0xe2, 0x97, 0x27, 0xd5, 0x89, 0x3f, 0x9e, 0x54, 0x27, 0xbe, 0xfd, 0xab, 0x3a, 0xf1,
	0x69, 0xa1, 0xdf, 0x68, 0x4f, 0x0b, 0xef, 0x57, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x9f,
	0x94, 0x5b, 0x5f, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerServiceClient interface {
	Create(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v11.JobProfile, error)
	Run(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v11.JobProfile, error)
	Get(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v11.JobProfile, error)
	Update(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*v11.JobProfile, error)
	StopStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	GetStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*v11.JobProfile, error)
	UpdateStreamStatus(ctx context.Context, in *StreamStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	VerifyChunk(ctx context.Context, in *VerifyChunkRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateContractAddr(ctx context.Context, in *ContractAddrRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ChunkCreated(ctx context.Context, in *ChunkCreatedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckBalance(ctx context.Context, in *CheckBalanceRequest, opts ...grpc.CallOption) (*CheckBalanceResponse, error)
	GetProfiles(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*v1.Profiles, error)
	GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*v1.Profile, error)
	RegisterTranscoder(ctx context.Context, in *v12.Transcoder, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateTranscoderStatus(ctx context.Context, in *TranscoderStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type managerServiceClient struct {
	cc *grpc.ClientConn
}

func NewManagerServiceClient(cc *grpc.ClientConn) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) Create(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v11.JobProfile, error) {
	out := new(v11.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Run(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v11.JobProfile, error) {
	out := new(v11.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Get(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*v11.JobProfile, error) {
	out := new(v11.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Update(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*v11.JobProfile, error) {
	out := new(v11.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) StopStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/StopStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*v11.JobProfile, error) {
	out := new(v11.JobProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/GetStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateStreamStatus(ctx context.Context, in *StreamStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/UpdateStreamStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) VerifyChunk(ctx context.Context, in *VerifyChunkRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/VerifyChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateContractAddr(ctx context.Context, in *ContractAddrRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/UpdateContractAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) AddProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/AddProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ChunkCreated(ctx context.Context, in *ChunkCreatedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/ChunkCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CheckBalance(ctx context.Context, in *CheckBalanceRequest, opts ...grpc.CallOption) (*CheckBalanceResponse, error) {
	out := new(CheckBalanceResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/CheckBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetProfiles(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*v1.Profiles, error) {
	out := new(v1.Profiles)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/GetProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*v1.Profile, error) {
	out := new(v1.Profile)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) RegisterTranscoder(ctx context.Context, in *v12.Transcoder, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/RegisterTranscoder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateTranscoderStatus(ctx context.Context, in *TranscoderStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.manager.v1.ManagerService/UpdateTranscoderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
type ManagerServiceServer interface {
	Create(context.Context, *JobRequest) (*v11.JobProfile, error)
	Run(context.Context, *JobRequest) (*v11.JobProfile, error)
	Get(context.Context, *JobRequest) (*v11.JobProfile, error)
	Update(context.Context, *UpdateJobRequest) (*v11.JobProfile, error)
	StopStream(context.Context, *StreamRequest) (*empty.Empty, error)
	Health(context.Context, *empty.Empty) (*rpc.HealthStatus, error)
	GetStream(context.Context, *StreamRequest) (*v11.JobProfile, error)
	UpdateStreamStatus(context.Context, *StreamStatusRequest) (*empty.Empty, error)
	VerifyChunk(context.Context, *VerifyChunkRequest) (*empty.Empty, error)
	UpdateContractAddr(context.Context, *ContractAddrRequest) (*empty.Empty, error)
	AddProfile(context.Context, *UpdateProfileRequest) (*empty.Empty, error)
	ChunkCreated(context.Context, *ChunkCreatedRequest) (*empty.Empty, error)
	CheckBalance(context.Context, *CheckBalanceRequest) (*CheckBalanceResponse, error)
	GetProfiles(context.Context, *empty.Empty) (*v1.Profiles, error)
	GetProfile(context.Context, *ProfileRequest) (*v1.Profile, error)
	RegisterTranscoder(context.Context, *v12.Transcoder) (*empty.Empty, error)
	UpdateTranscoderStatus(context.Context, *TranscoderStatusRequest) (*empty.Empty, error)
}

func RegisterManagerServiceServer(s *grpc.Server, srv ManagerServiceServer) {
	s.RegisterService(&_ManagerService_serviceDesc, srv)
}

func _ManagerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Create(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Run(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Get(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Update(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_StopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).StopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/StopStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).StopStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/GetStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/UpdateStreamStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateStreamStatus(ctx, req.(*StreamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_VerifyChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).VerifyChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/VerifyChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).VerifyChunk(ctx, req.(*VerifyChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateContractAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateContractAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/UpdateContractAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateContractAddr(ctx, req.(*ContractAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).AddProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/AddProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).AddProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ChunkCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkCreatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ChunkCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/ChunkCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ChunkCreated(ctx, req.(*ChunkCreatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CheckBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CheckBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/CheckBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CheckBalance(ctx, req.(*CheckBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/GetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetProfiles(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_RegisterTranscoder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v12.Transcoder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).RegisterTranscoder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/RegisterTranscoder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).RegisterTranscoder(ctx, req.(*v12.Transcoder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateTranscoderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscoderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateTranscoderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.manager.v1.ManagerService/UpdateTranscoderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateTranscoderStatus(ctx, req.(*TranscoderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.manager.v1.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ManagerService_Create_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _ManagerService_Run_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ManagerService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ManagerService_Update_Handler,
		},
		{
			MethodName: "StopStream",
			Handler:    _ManagerService_StopStream_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ManagerService_Health_Handler,
		},
		{
			MethodName: "GetStream",
			Handler:    _ManagerService_GetStream_Handler,
		},
		{
			MethodName: "UpdateStreamStatus",
			Handler:    _ManagerService_UpdateStreamStatus_Handler,
		},
		{
			MethodName: "VerifyChunk",
			Handler:    _ManagerService_VerifyChunk_Handler,
		},
		{
			MethodName: "UpdateContractAddr",
			Handler:    _ManagerService_UpdateContractAddr_Handler,
		},
		{
			MethodName: "AddProfile",
			Handler:    _ManagerService_AddProfile_Handler,
		},
		{
			MethodName: "ChunkCreated",
			Handler:    _ManagerService_ChunkCreated_Handler,
		},
		{
			MethodName: "CheckBalance",
			Handler:    _ManagerService_CheckBalance_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _ManagerService_GetProfiles_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ManagerService_GetProfile_Handler,
		},
		{
			MethodName: "RegisterTranscoder",
			Handler:    _ManagerService_RegisterTranscoder_Handler,
		},
		{
			MethodName: "UpdateTranscoderStatus",
			Handler:    _ManagerService_UpdateTranscoderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager/v1/manager.proto",
}
