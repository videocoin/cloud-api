// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: users/v1/user.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v1 "github.com/VideoCoin/cloud-api/accounts/v1"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserRole int32

const (
	UserRoleRegular UserRole = 0
	UserRoleManager UserRole = 1
	UserRoleQa      UserRole = 2
	UserRoleSuper   UserRole = 3
)

var UserRole_name = map[int32]string{
	0: "REGULAR",
	1: "MANAGER",
	2: "QA",
	3: "SUPER",
}
var UserRole_value = map[string]int32{
	"REGULAR": 0,
	"MANAGER": 1,
	"QA":      2,
	"SUPER":   3,
}

func (x UserRole) String() string {
	return proto.EnumName(UserRole_name, int32(x))
}
func (UserRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_user_1f1ad083cee84f87, []int{0}
}

type User struct {
	ID                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"type:varchar(36);primary_key"`
	Email                string     `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" gorm:"unique_index"`
	Password             string     `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" gorm:"type:varchar(100)"`
	Name                 string     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" gorm:"type:varchar(100)"`
	Role                 UserRole   `protobuf:"varint,5,opt,name=role,proto3,enum=cloud.api.users.v1.UserRole" json:"role,omitempty"`
	IsActive             bool       `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ActivatedAt          *time.Time `protobuf:"bytes,7,opt,name=activated_at,json=activatedAt,proto3,stdtime" json:"activated_at,omitempty"`
	CreatedAt            *time.Time `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	Token                string     `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty" gorm:"type:varchar(255);index"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_1f1ad083cee84f87, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetRole() UserRole {
	if m != nil {
		return m.Role
	}
	return UserRoleRegular
}

func (m *User) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *User) GetActivatedAt() *time.Time {
	if m != nil {
		return m.ActivatedAt
	}
	return nil
}

func (m *User) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (*User) XXX_MessageName() string {
	return "cloud.api.users.v1.User"
}

type UserProfile struct {
	ID                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email                string             `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsActive             bool               `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Account              *v1.AccountProfile `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UserProfile) Reset()         { *m = UserProfile{} }
func (m *UserProfile) String() string { return proto.CompactTextString(m) }
func (*UserProfile) ProtoMessage()    {}
func (*UserProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_1f1ad083cee84f87, []int{1}
}
func (m *UserProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserProfile.Merge(dst, src)
}
func (m *UserProfile) XXX_Size() int {
	return m.Size()
}
func (m *UserProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_UserProfile.DiscardUnknown(m)
}

var xxx_messageInfo_UserProfile proto.InternalMessageInfo

func (m *UserProfile) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *UserProfile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserProfile) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *UserProfile) GetAccount() *v1.AccountProfile {
	if m != nil {
		return m.Account
	}
	return nil
}

func (*UserProfile) XXX_MessageName() string {
	return "cloud.api.users.v1.UserProfile"
}
func init() {
	proto.RegisterType((*User)(nil), "cloud.api.users.v1.User")
	golang_proto.RegisterType((*User)(nil), "cloud.api.users.v1.User")
	proto.RegisterType((*UserProfile)(nil), "cloud.api.users.v1.UserProfile")
	golang_proto.RegisterType((*UserProfile)(nil), "cloud.api.users.v1.UserProfile")
	proto.RegisterEnum("cloud.api.users.v1.UserRole", UserRole_name, UserRole_value)
	golang_proto.RegisterEnum("cloud.api.users.v1.UserRole", UserRole_name, UserRole_value)
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Role != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Role))
	}
	if m.IsActive {
		dAtA[i] = 0x30
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ActivatedAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUser(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ActivatedAt)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ActivatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUser(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.IsActive {
		dAtA[i] = 0x20
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Account != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Account.Size()))
		n3, err := m.Account.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovUser(uint64(m.Role))
	}
	if m.IsActive {
		n += 2
	}
	if m.ActivatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ActivatedAt)
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (UserRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivatedAt == nil {
				m.ActivatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ActivatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &v1.AccountProfile{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("users/v1/user.proto", fileDescriptor_user_1f1ad083cee84f87) }
func init() { golang_proto.RegisterFile("users/v1/user.proto", fileDescriptor_user_1f1ad083cee84f87) }

var fileDescriptor_user_1f1ad083cee84f87 = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4f, 0xd4, 0x4e,
	0x18, 0xc6, 0x99, 0x65, 0x17, 0x76, 0x67, 0xff, 0x7f, 0x5c, 0x07, 0xa3, 0x4d, 0x25, 0x6d, 0x53,
	0x3d, 0x2c, 0x26, 0xdb, 0x65, 0x97, 0x60, 0x08, 0x44, 0x4d, 0x41, 0x42, 0x4c, 0xc4, 0x40, 0x11,
	0x0f, 0x5e, 0x36, 0x43, 0x3b, 0x94, 0x09, 0x6d, 0xa7, 0x4e, 0xdb, 0x55, 0xbe, 0x81, 0xe1, 0xe4,
	0xc9, 0x1b, 0x27, 0x3d, 0xfa, 0x09, 0x3c, 0x79, 0xe4, 0xe8, 0x27, 0x58, 0xcd, 0xf2, 0x01, 0x4c,
	0xf6, 0x13, 0x98, 0x4e, 0xdb, 0x15, 0x94, 0x03, 0xb7, 0xf7, 0xcd, 0xfb, 0x3c, 0xef, 0xcc, 0x3c,
	0xbf, 0x81, 0xb3, 0x49, 0x44, 0x78, 0xd4, 0xee, 0x77, 0xda, 0x69, 0x61, 0x84, 0x9c, 0xc5, 0x0c,
	0x21, 0xdb, 0x63, 0x89, 0x63, 0xe0, 0x90, 0x1a, 0x62, 0x6c, 0xf4, 0x3b, 0x72, 0xcb, 0xa5, 0xf1,
	0x61, 0xb2, 0x6f, 0xd8, 0xcc, 0x6f, 0xbb, 0xcc, 0x65, 0x6d, 0x21, 0xdd, 0x4f, 0x0e, 0x44, 0x27,
	0x1a, 0x51, 0x65, 0x2b, 0xe4, 0xe5, 0x0b, 0xf2, 0x57, 0xd4, 0x21, 0x6c, 0x9d, 0xd1, 0xa0, 0x2d,
	0xf6, 0xb6, 0x70, 0x48, 0xdb, 0xd8, 0xb6, 0x59, 0x12, 0xc4, 0xe2, 0xe4, 0xbc, 0xce, 0x9d, 0xaa,
	0xcb, 0x98, 0xeb, 0x91, 0x3f, 0xfb, 0x63, 0xea, 0x93, 0x28, 0xc6, 0x7e, 0x98, 0x09, 0xf4, 0x5f,
	0x93, 0xb0, 0xbc, 0x17, 0x11, 0x8e, 0x1e, 0xc1, 0x12, 0x75, 0x24, 0xa0, 0x81, 0x66, 0x6d, 0xad,
	0x35, 0x1c, 0xa8, 0xa5, 0x67, 0x4f, 0x47, 0x03, 0xf5, 0x9e, 0xcb, 0xb8, 0xbf, 0xa2, 0xc7, 0xc7,
	0x21, 0x59, 0xe9, 0x63, 0x6e, 0x1f, 0x62, 0xde, 0x5c, 0x7c, 0x38, 0xbf, 0x1a, 0x72, 0xea, 0x63,
	0x7e, 0xdc, 0x3b, 0x22, 0xc7, 0xba, 0x55, 0xa2, 0x0e, 0x6a, 0xc1, 0x0a, 0xf1, 0x31, 0xf5, 0xa4,
	0x92, 0xd8, 0x70, 0x67, 0x34, 0x50, 0x67, 0x33, 0x6f, 0x12, 0xd0, 0x37, 0x09, 0xe9, 0xd1, 0xc0,
	0x21, 0xef, 0x74, 0x2b, 0x53, 0xa1, 0x65, 0x58, 0x0d, 0x71, 0x14, 0xbd, 0x65, 0xdc, 0x91, 0x26,
	0x85, 0x63, 0x6e, 0x34, 0x50, 0xa5, 0x2b, 0x4e, 0xeb, 0x2c, 0x2c, 0xcc, 0xeb, 0xd6, 0x58, 0x8d,
	0x16, 0x60, 0x39, 0xc0, 0x3e, 0x91, 0xca, 0xd7, 0x70, 0x09, 0x65, 0xea, 0xe0, 0xcc, 0x23, 0x52,
	0x45, 0x03, 0xcd, 0x99, 0xee, 0x9c, 0xf1, 0x2f, 0x0f, 0x23, 0x4d, 0xc0, 0x62, 0x1e, 0xb1, 0x84,
	0x12, 0xdd, 0x85, 0x35, 0x1a, 0xf5, 0xb0, 0x1d, 0xd3, 0x3e, 0x91, 0xa6, 0x34, 0xd0, 0xac, 0x5a,
	0x55, 0x1a, 0x99, 0xa2, 0x47, 0xeb, 0xf0, 0x3f, 0x31, 0xc1, 0x31, 0x71, 0x7a, 0x38, 0x96, 0xa6,
	0x35, 0xd0, 0xac, 0x77, 0x65, 0x23, 0x4b, 0xda, 0x28, 0x92, 0x36, 0x5e, 0x16, 0x49, 0xaf, 0x95,
	0x3f, 0xfc, 0x50, 0x81, 0x55, 0x1f, 0xbb, 0xcc, 0x18, 0x3d, 0x81, 0xd0, 0xe6, 0xa4, 0x58, 0x51,
	0xbd, 0xe6, 0x8a, 0x5a, 0xee, 0x31, 0x63, 0xb4, 0x0c, 0x2b, 0x31, 0x3b, 0x22, 0x81, 0x54, 0x13,
	0x39, 0xe8, 0xa3, 0x81, 0xaa, 0x5c, 0x91, 0x43, 0x77, 0x69, 0x69, 0x7e, 0xb5, 0x88, 0x5e, 0x18,
	0xf4, 0x2f, 0x00, 0xd6, 0xd3, 0xf7, 0x6e, 0x73, 0x76, 0x40, 0x3d, 0x82, 0x6e, 0x5f, 0x00, 0x3f,
	0x95, 0x81, 0x17, 0x44, 0x6f, 0x5d, 0x22, 0x5a, 0x80, 0x43, 0x79, 0xfc, 0x02, 0x5a, 0x1e, 0xf0,
	0xa5, 0xb8, 0xca, 0x7f, 0xc5, 0xf5, 0x18, 0x4e, 0xe7, 0x5f, 0x52, 0x00, 0xa8, 0x77, 0xef, 0x5f,
	0x00, 0x50, 0x7c, 0xd6, 0x7e, 0xc7, 0x30, 0xb3, 0x32, 0xbf, 0x95, 0x55, 0x98, 0x1e, 0x7c, 0x04,
	0xb0, 0x5a, 0xe0, 0x41, 0x1a, 0x9c, 0xb6, 0x36, 0x36, 0xf7, 0x9e, 0x9b, 0x56, 0x63, 0x42, 0x9e,
	0x3d, 0x39, 0xd5, 0x6e, 0x8c, 0xc9, 0x11, 0x37, 0xf1, 0x30, 0x4f, 0x15, 0x5b, 0xe6, 0x0b, 0x73,
	0x73, 0xc3, 0x6a, 0x80, 0xcb, 0x8a, 0x2d, 0x1c, 0x60, 0x97, 0xf0, 0xf4, 0xbd, 0x3b, 0x66, 0xa3,
	0x24, 0xcf, 0x9c, 0x9c, 0x6a, 0xb0, 0x18, 0xee, 0x60, 0x34, 0x07, 0x2b, 0xbb, 0x7b, 0xdb, 0x1b,
	0x56, 0x63, 0x52, 0xbe, 0x79, 0x72, 0xaa, 0xfd, 0x5f, 0x8c, 0x76, 0x93, 0x90, 0x70, 0xb9, 0xf1,
	0xfe, 0x93, 0x32, 0xf1, 0xf5, 0xb3, 0x32, 0xbe, 0xcb, 0x9a, 0x74, 0x36, 0x54, 0xc0, 0xf7, 0xa1,
	0x02, 0x7e, 0x0e, 0x15, 0xf0, 0xed, 0x5c, 0x01, 0x67, 0xe7, 0x0a, 0x78, 0x5d, 0xea, 0x77, 0xf6,
	0xa7, 0x04, 0xc0, 0xc5, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x54, 0xb8, 0x75, 0x20, 0x0f, 0x04,
	0x00, 0x00,
}
