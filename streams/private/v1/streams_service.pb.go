// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: streams/private/v1/streams_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	v1 "github.com/videocoin/cloud-api/profiles/v1"
	rpc "github.com/videocoin/cloud-api/rpc"
	v11 "github.com/videocoin/cloud-api/streams/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StreamRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55d803021125e230, []int{0}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*StreamRequest) XXX_MessageName() string {
	return "cloud.api.streams.private.v1.StreamRequest"
}

type StreamResponse struct {
	ID                    string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProfileID             v1.ProfileId     `protobuf:"varint,3,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	InputURL              string           `protobuf:"bytes,4,opt,name=input_url,json=inputUrl,proto3" json:"input_url,omitempty"`
	OutputURL             string           `protobuf:"bytes,5,opt,name=output_url,json=outputUrl,proto3" json:"output_url,omitempty"`
	StreamContractID      uint64           `protobuf:"varint,7,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	StreamContractAddress string           `protobuf:"bytes,8,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	Status                v11.StreamStatus `protobuf:"varint,9,opt,name=status,proto3,enum=cloud.api.streams.v1.StreamStatus" json:"status,omitempty"`
	InputStatus           v11.InputStatus  `protobuf:"varint,10,opt,name=input_status,json=inputStatus,proto3,enum=cloud.api.streams.v1.InputStatus" json:"input_status,omitempty"`
	CreatedAt             *time.Time       `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt             *time.Time       `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	ReadyAt               *time.Time       `protobuf:"bytes,12,opt,name=ready_at,json=readyAt,proto3,stdtime" json:"ready_at,omitempty"`
	CompletedAt           *time.Time       `protobuf:"bytes,13,opt,name=completed_at,json=completedAt,proto3,stdtime" json:"completed_at,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55d803021125e230, []int{1}
}
func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *StreamResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StreamResponse) GetProfileID() v1.ProfileId {
	if m != nil {
		return m.ProfileID
	}
	return v1.ProfileIdNone
}

func (m *StreamResponse) GetInputURL() string {
	if m != nil {
		return m.InputURL
	}
	return ""
}

func (m *StreamResponse) GetOutputURL() string {
	if m != nil {
		return m.OutputURL
	}
	return ""
}

func (m *StreamResponse) GetStreamContractID() uint64 {
	if m != nil {
		return m.StreamContractID
	}
	return 0
}

func (m *StreamResponse) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *StreamResponse) GetStatus() v11.StreamStatus {
	if m != nil {
		return m.Status
	}
	return v11.StreamStatusNone
}

func (m *StreamResponse) GetInputStatus() v11.InputStatus {
	if m != nil {
		return m.InputStatus
	}
	return v11.InputStatusNone
}

func (m *StreamResponse) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *StreamResponse) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *StreamResponse) GetReadyAt() *time.Time {
	if m != nil {
		return m.ReadyAt
	}
	return nil
}

func (m *StreamResponse) GetCompletedAt() *time.Time {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

func (*StreamResponse) XXX_MessageName() string {
	return "cloud.api.streams.private.v1.StreamResponse"
}
func init() {
	proto.RegisterType((*StreamRequest)(nil), "cloud.api.streams.private.v1.StreamRequest")
	golang_proto.RegisterType((*StreamRequest)(nil), "cloud.api.streams.private.v1.StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "cloud.api.streams.private.v1.StreamResponse")
	golang_proto.RegisterType((*StreamResponse)(nil), "cloud.api.streams.private.v1.StreamResponse")
}

func init() {
	proto.RegisterFile("streams/private/v1/streams_service.proto", fileDescriptor_55d803021125e230)
}
func init() {
	golang_proto.RegisterFile("streams/private/v1/streams_service.proto", fileDescriptor_55d803021125e230)
}

var fileDescriptor_55d803021125e230 = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0xc7, 0x97, 0xae, 0xeb, 0x5a, 0xb7, 0x9b, 0xf6, 0xb3, 0x7e, 0x8c, 0xa8, 0x9b, 0xda, 0xd2,
	0x53, 0x11, 0x9b, 0xa3, 0x0e, 0x69, 0x12, 0x70, 0x98, 0xda, 0x15, 0x41, 0x25, 0x04, 0x28, 0x63,
	0x17, 0x2e, 0x95, 0x9b, 0x78, 0x9d, 0xa5, 0x24, 0x36, 0xb1, 0x13, 0x69, 0xef, 0x82, 0x37, 0xc3,
	0x9d, 0xe3, 0x8e, 0xbc, 0x82, 0x82, 0xb2, 0x03, 0x6f, 0x03, 0xc5, 0x76, 0xd6, 0xfd, 0x41, 0xac,
	0x37, 0xdb, 0xcf, 0xe7, 0xfb, 0xcd, 0xd3, 0x6f, 0xfd, 0x18, 0xf4, 0x84, 0x8c, 0x09, 0x0e, 0x85,
	0xc3, 0x63, 0x9a, 0x62, 0x49, 0x9c, 0xb4, 0xef, 0x98, 0xa3, 0x89, 0x20, 0x71, 0x4a, 0x3d, 0x82,
	0x78, 0xcc, 0x24, 0x83, 0xbb, 0x5e, 0xc0, 0x12, 0x1f, 0x61, 0x4e, 0x91, 0x01, 0x90, 0xd1, 0xa0,
	0xb4, 0xdf, 0xdc, 0x99, 0x31, 0x36, 0x0b, 0x88, 0xa3, 0xd8, 0x69, 0x72, 0xe6, 0x90, 0x90, 0xcb,
	0x0b, 0x2d, 0x6d, 0xb6, 0xef, 0x16, 0x25, 0x0d, 0x89, 0x90, 0x38, 0xe4, 0x06, 0xd8, 0x35, 0x00,
	0xe6, 0xd4, 0xc1, 0x51, 0xc4, 0x24, 0x96, 0x94, 0x45, 0xc2, 0x54, 0xf7, 0x67, 0x54, 0x9e, 0x27,
	0x53, 0xe4, 0xb1, 0xd0, 0x99, 0xb1, 0x19, 0x5b, 0xf8, 0xe4, 0x3b, 0xb5, 0x51, 0x2b, 0x83, 0x3b,
	0x37, 0xf0, 0x94, 0xfa, 0x84, 0x79, 0x8c, 0x46, 0x8e, 0xea, 0x7e, 0x3f, 0xff, 0x40, 0xcc, 0x3d,
	0xe7, 0x9c, 0xe0, 0x40, 0x9e, 0x1b, 0xc1, 0x8b, 0x07, 0x04, 0x3c, 0x66, 0x67, 0x34, 0x20, 0x22,
	0xcf, 0xa6, 0x58, 0x1b, 0xe9, 0xe1, 0x03, 0xd2, 0x22, 0xdd, 0xeb, 0x54, 0xb5, 0xae, 0xdb, 0x06,
	0x1b, 0x27, 0x6a, 0xef, 0x92, 0x2f, 0x09, 0x11, 0x12, 0x6e, 0x82, 0x12, 0xf5, 0x6d, 0xab, 0x63,
	0xf5, 0x6a, 0x6e, 0x89, 0xfa, 0xdd, 0xdf, 0x6b, 0x60, 0xb3, 0x20, 0x04, 0x67, 0x91, 0x20, 0x70,
	0x7b, 0x81, 0x0c, 0x2b, 0xd9, 0xbc, 0x5d, 0x1a, 0x8f, 0x72, 0x14, 0x42, 0x50, 0x8e, 0x70, 0x48,
	0xec, 0x92, 0x12, 0xab, 0x35, 0x7c, 0x0f, 0x80, 0xe9, 0x74, 0x42, 0x7d, 0x7b, 0xb5, 0x63, 0xf5,
	0x36, 0x0f, 0x3a, 0x68, 0xf1, 0x0f, 0x5e, 0xff, 0x8c, 0xb4, 0x8f, 0x3e, 0xea, 0xf5, 0xd8, 0x1f,
	0x6e, 0x64, 0xf3, 0x76, 0xad, 0xd8, 0x8e, 0xdc, 0x1a, 0x2f, 0x2a, 0xf0, 0x29, 0xa8, 0xd1, 0x88,
	0x27, 0x72, 0x92, 0xc4, 0x81, 0x5d, 0x56, 0x2d, 0x34, 0xb2, 0x79, 0xbb, 0x3a, 0xce, 0x0f, 0x4f,
	0xdd, 0x77, 0x6e, 0x55, 0x95, 0x4f, 0xe3, 0x00, 0xee, 0x01, 0xc0, 0x12, 0x59, 0xb0, 0x6b, 0x8a,
	0x55, 0xc6, 0x1f, 0xd4, 0x69, 0x0e, 0xd7, 0x34, 0x90, 0xd3, 0x43, 0x00, 0x75, 0x30, 0x13, 0x8f,
	0x45, 0x32, 0xc6, 0x9e, 0xcc, 0x1b, 0x5e, 0xef, 0x58, 0xbd, 0xf2, 0xf0, 0xff, 0x6c, 0xde, 0xde,
	0xd2, 0x21, 0x1c, 0x9b, 0xe2, 0x78, 0xe4, 0x6e, 0x89, 0xdb, 0x27, 0x3e, 0x3c, 0x04, 0x8f, 0xef,
	0x7a, 0x60, 0xdf, 0x8f, 0x89, 0x10, 0x76, 0x55, 0x65, 0xf2, 0xe8, 0xb6, 0x64, 0xa0, 0x8b, 0xf0,
	0x25, 0xa8, 0x08, 0x89, 0x65, 0x22, 0xec, 0x9a, 0x0a, 0xa8, 0x8b, 0xee, 0x5f, 0xf1, 0xb4, 0x8f,
	0x74, 0x07, 0x27, 0x8a, 0x74, 0x8d, 0x02, 0x8e, 0x40, 0x43, 0x07, 0x62, 0x1c, 0x80, 0x72, 0x78,
	0xf2, 0x77, 0x07, 0x95, 0x92, 0x31, 0xa8, 0xd3, 0xc5, 0x06, 0x1e, 0x01, 0xe0, 0xc5, 0x04, 0x4b,
	0xe2, 0x4f, 0xb0, 0xb4, 0xeb, 0x1d, 0xab, 0x57, 0x3f, 0x68, 0x22, 0x3d, 0x0c, 0xa8, 0xb8, 0xe5,
	0xe8, 0x53, 0x31, 0x2d, 0xc3, 0xf2, 0xd7, 0x9f, 0x6d, 0xcb, 0xad, 0x19, 0xcd, 0x40, 0xe6, 0x06,
	0x09, 0xf7, 0x0b, 0x83, 0xff, 0x96, 0x35, 0x30, 0x9a, 0x81, 0x84, 0xaf, 0x40, 0x35, 0x26, 0xd8,
	0xbf, 0xc8, 0xe5, 0x8d, 0x25, 0xe5, 0xeb, 0x4a, 0x31, 0x90, 0xf0, 0x18, 0x34, 0x3c, 0x16, 0xf2,
	0x80, 0x98, 0xef, 0x6f, 0x2c, 0x69, 0x50, 0xbf, 0x56, 0x0d, 0xe4, 0xc1, 0x37, 0xab, 0xb8, 0xe9,
	0xe2, 0x44, 0x3f, 0x38, 0xf0, 0x08, 0x54, 0xde, 0xaa, 0x01, 0x85, 0xdb, 0xf7, 0xbc, 0x5e, 0xe7,
	0xef, 0x4a, 0x73, 0xe7, 0x46, 0xd0, 0x31, 0xf7, 0x90, 0xc6, 0x75, 0xaa, 0xdd, 0x15, 0x38, 0x05,
	0xab, 0x6f, 0x88, 0x84, 0xcf, 0xd0, 0xbf, 0xde, 0x2c, 0x74, 0x6b, 0x02, 0x9b, 0x7b, 0xcb, 0xc1,
	0x7a, 0x18, 0xbb, 0x2b, 0x43, 0xfb, 0x32, 0x6b, 0x59, 0x3f, 0xb2, 0x96, 0xf5, 0x2b, 0x6b, 0x59,
	0xdf, 0xaf, 0x5a, 0xd6, 0xe5, 0x55, 0xcb, 0xfa, 0x5c, 0x4a, 0xfb, 0xd3, 0x8a, 0x6a, 0xf6, 0xf9,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xf1, 0xdd, 0xb0, 0x5c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamsServiceClient is the client API for StreamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamsServiceClient interface {
	Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	Get(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
}

type streamsServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamsServiceClient(cc *grpc.ClientConn) StreamsServiceClient {
	return &streamsServiceClient{cc}
}

func (c *streamsServiceClient) Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.private.v1.StreamsService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) Get(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.private.v1.StreamsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamsServiceServer is the server API for StreamsService service.
type StreamsServiceServer interface {
	Health(context.Context, *types.Empty) (*rpc.HealthStatus, error)
	Get(context.Context, *StreamRequest) (*StreamResponse, error)
}

// UnimplementedStreamsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamsServiceServer struct {
}

func (*UnimplementedStreamsServiceServer) Health(ctx context.Context, req *types.Empty) (*rpc.HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedStreamsServiceServer) Get(ctx context.Context, req *StreamRequest) (*StreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterStreamsServiceServer(s *grpc.Server, srv StreamsServiceServer) {
	s.RegisterService(&_StreamsService_serviceDesc, srv)
}

func _StreamsService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.private.v1.StreamsService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).Health(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.private.v1.StreamsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).Get(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.streams.private.v1.StreamsService",
	HandlerType: (*StreamsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _StreamsService_Health_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StreamsService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streams/private/v1/streams_service.proto",
}

func (m *StreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ProfileID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(m.ProfileID))
	}
	if len(m.InputURL) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.InputURL)))
		i += copy(dAtA[i:], m.InputURL)
	}
	if len(m.OutputURL) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.OutputURL)))
		i += copy(dAtA[i:], m.OutputURL)
	}
	if m.StreamContractID != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(m.StreamContractID))
	}
	if len(m.StreamContractAddress) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(len(m.StreamContractAddress)))
		i += copy(dAtA[i:], m.StreamContractAddress)
	}
	if m.Status != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(m.Status))
	}
	if m.InputStatus != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(m.InputStatus))
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.ReadyAt != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReadyAt)))
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ReadyAt, dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.CompletedAt != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CompletedAt)))
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CompletedAt, dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStreamsService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)))
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintStreamsService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.ProfileID != 0 {
		n += 1 + sovStreamsService(uint64(m.ProfileID))
	}
	l = len(m.InputURL)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	l = len(m.OutputURL)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.StreamContractID != 0 {
		n += 1 + sovStreamsService(uint64(m.StreamContractID))
	}
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovStreamsService(uint64(m.Status))
	}
	if m.InputStatus != 0 {
		n += 1 + sovStreamsService(uint64(m.InputStatus))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.ReadyAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReadyAt)
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.CompletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CompletedAt)
		n += 1 + l + sovStreamsService(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovStreamsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStreamsService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStreamsService(x uint64) (n int) {
	return sovStreamsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileID", wireType)
			}
			m.ProfileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileID |= v1.ProfileId(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractID", wireType)
			}
			m.StreamContractID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= v11.StreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStatus", wireType)
			}
			m.InputStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputStatus |= v11.InputStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadyAt == nil {
				m.ReadyAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ReadyAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CompletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStreamsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStreamsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStreamsService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthStreamsService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStreamsService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStreamsService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthStreamsService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStreamsService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStreamsService   = fmt.Errorf("proto: integer overflow")
)
