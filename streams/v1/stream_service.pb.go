// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: streams/v1/stream_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	v1 "github.com/VideoCoin/cloud-api/profiles/v1"
	rpc "github.com/VideoCoin/cloud-api/rpc"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateStreamRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStreamRequest) Reset()         { *m = CreateStreamRequest{} }
func (m *CreateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStreamRequest) ProtoMessage()    {}
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_070552407ccdf2ad, []int{0}
}
func (m *CreateStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateStreamRequest.Unmarshal(m, b)
}
func (m *CreateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateStreamRequest.Marshal(b, m, deterministic)
}
func (m *CreateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamRequest.Merge(m, src)
}
func (m *CreateStreamRequest) XXX_Size() int {
	return xxx_messageInfo_CreateStreamRequest.Size(m)
}
func (m *CreateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamRequest proto.InternalMessageInfo

func (m *CreateStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StreamRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_070552407ccdf2ad, []int{1}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListResponse struct {
	Items                []*StreamProfile `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_070552407ccdf2ad, []int{2}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListResponse.Unmarshal(m, b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return xxx_messageInfo_ListResponse.Size(m)
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetItems() []*StreamProfile {
	if m != nil {
		return m.Items
	}
	return nil
}

type UpdateStreamRequest struct {
	Id                   string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                 string       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	StreamId             uint64       `protobuf:"varint,5,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StreamAddress        string       `protobuf:"bytes,6,opt,name=stream_address,json=streamAddress,proto3" json:"stream_address,omitempty"`
	Status               StreamStatus `protobuf:"varint,7,opt,name=status,proto3,enum=cloud.api.streams.v1.StreamStatus" json:"status,omitempty"`
	ProfileId            v1.ProfileId `protobuf:"varint,8,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateStreamRequest) Reset()         { *m = UpdateStreamRequest{} }
func (m *UpdateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateStreamRequest) ProtoMessage()    {}
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_070552407ccdf2ad, []int{3}
}
func (m *UpdateStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateStreamRequest.Unmarshal(m, b)
}
func (m *UpdateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateStreamRequest.Marshal(b, m, deterministic)
}
func (m *UpdateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStreamRequest.Merge(m, src)
}
func (m *UpdateStreamRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateStreamRequest.Size(m)
}
func (m *UpdateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStreamRequest proto.InternalMessageInfo

func (m *UpdateStreamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateStreamRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateStreamRequest) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *UpdateStreamRequest) GetStreamAddress() string {
	if m != nil {
		return m.StreamAddress
	}
	return ""
}

func (m *UpdateStreamRequest) GetStatus() StreamStatus {
	if m != nil {
		return m.Status
	}
	return StreamStatusIdle
}

func (m *UpdateStreamRequest) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func init() {
	proto.RegisterType((*CreateStreamRequest)(nil), "cloud.api.streams.v1.CreateStreamRequest")
	proto.RegisterType((*StreamRequest)(nil), "cloud.api.streams.v1.StreamRequest")
	proto.RegisterType((*ListResponse)(nil), "cloud.api.streams.v1.ListResponse")
	proto.RegisterType((*UpdateStreamRequest)(nil), "cloud.api.streams.v1.UpdateStreamRequest")
}

func init() { proto.RegisterFile("streams/v1/stream_service.proto", fileDescriptor_070552407ccdf2ad) }

var fileDescriptor_070552407ccdf2ad = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x6e, 0x13, 0x3b,
	0x14, 0xcd, 0x4c, 0xd2, 0x69, 0xe2, 0xf7, 0xda, 0xd7, 0xe7, 0x46, 0x6d, 0x98, 0x94, 0x34, 0x0c,
	0x20, 0x05, 0xa4, 0xcc, 0x28, 0x85, 0x4d, 0xbb, 0x41, 0x6d, 0x85, 0x20, 0x12, 0x12, 0x68, 0x2a,
	0x58, 0xc0, 0xa2, 0x9a, 0xc6, 0x6e, 0x6a, 0x29, 0x33, 0x36, 0xb6, 0x67, 0xa0, 0x20, 0x36, 0xac,
	0xd8, 0xb3, 0xe9, 0x8e, 0xff, 0x60, 0xc5, 0x92, 0x25, 0x12, 0x3f, 0x80, 0x0a, 0x1b, 0xfe, 0x02,
	0x8d, 0xed, 0xb4, 0xa1, 0x4d, 0x0a, 0x95, 0xba, 0xbb, 0xbe, 0xbe, 0xc7, 0xe7, 0x9e, 0x7b, 0x8f,
	0xc1, 0xb2, 0x90, 0x1c, 0x47, 0xb1, 0x08, 0xb2, 0x4e, 0xa0, 0xc3, 0x6d, 0x81, 0x79, 0x46, 0x7a,
	0xd8, 0x67, 0x9c, 0x4a, 0x0a, 0xab, 0xbd, 0x01, 0x4d, 0x91, 0x1f, 0x31, 0xe2, 0x9b, 0x52, 0x3f,
	0xeb, 0xb8, 0xf5, 0x3e, 0xa5, 0xfd, 0x01, 0x0e, 0x54, 0xcd, 0x4e, 0xba, 0x1b, 0xe0, 0x98, 0xc9,
	0x7d, 0x0d, 0x71, 0x97, 0xcc, 0x65, 0xc4, 0x48, 0x10, 0x25, 0x09, 0x95, 0x91, 0x24, 0x34, 0x11,
	0xe6, 0xb6, 0xdd, 0x27, 0x72, 0x2f, 0xdd, 0xf1, 0x7b, 0x34, 0x0e, 0xfa, 0xb4, 0x4f, 0x8f, 0xdf,
	0xc8, 0x4f, 0xea, 0xa0, 0x22, 0x53, 0x1e, 0x8c, 0x94, 0x3f, 0x21, 0x08, 0xd3, 0x4d, 0x4a, 0x92,
	0x40, 0x35, 0xd5, 0xce, 0x09, 0x38, 0xeb, 0x05, 0x7b, 0x38, 0x1a, 0xc8, 0x3d, 0x03, 0x58, 0xfd,
	0x03, 0x80, 0x71, 0xba, 0x4b, 0x06, 0x58, 0x29, 0x1e, 0xc6, 0x06, 0xba, 0x3e, 0x02, 0xc5, 0x49,
	0x46, 0xf7, 0x19, 0xa7, 0x2f, 0xf7, 0x75, 0x83, 0xbd, 0x76, 0x1f, 0x27, 0xed, 0x2c, 0x1a, 0x10,
	0x14, 0x49, 0x1c, 0x9c, 0x0a, 0xcc, 0x13, 0x8b, 0xa7, 0xe6, 0xa9, 0x2f, 0xbc, 0xdb, 0x60, 0x7e,
	0x93, 0xe3, 0x48, 0xe2, 0x2d, 0x95, 0x0d, 0xf1, 0xf3, 0x14, 0x0b, 0x09, 0x2f, 0x83, 0x52, 0x12,
	0xc5, 0xb8, 0x66, 0x35, 0xad, 0x56, 0x65, 0xa3, 0xf2, 0xf1, 0xe7, 0xa7, 0x62, 0x89, 0xdb, 0x73,
	0x56, 0xa8, 0xd2, 0xde, 0x32, 0x98, 0xf9, 0xbd, 0x7e, 0x16, 0xd8, 0x04, 0xe9, 0xea, 0xd0, 0x26,
	0xc8, 0xeb, 0x82, 0x7f, 0x1f, 0x10, 0x21, 0x43, 0x2c, 0x18, 0x4d, 0x04, 0x86, 0xab, 0x60, 0x8a,
	0x48, 0x1c, 0x8b, 0x9a, 0xd5, 0x2c, 0xb6, 0xfe, 0x59, 0xb9, 0xea, 0x8f, 0x5b, 0x9f, 0xaf, 0xdf,
	0x7c, 0xa4, 0xd5, 0x87, 0x1a, 0xe1, 0x7d, 0xb0, 0xc1, 0xfc, 0x63, 0x86, 0x4e, 0xb5, 0xe8, 0x1e,
	0x53, 0x6e, 0x80, 0xbc, 0xc1, 0x29, 0x5e, 0x3c, 0xb0, 0xae, 0xe5, 0xf4, 0x70, 0x11, 0x4c, 0xa7,
	0x02, 0xf3, 0x6d, 0x82, 0x6a, 0xb6, 0xea, 0xc9, 0xc9, 0x8f, 0x5d, 0x04, 0xa1, 0xd1, 0x55, 0x52,
	0x59, 0x15, 0xc3, 0x3a, 0xa8, 0x18, 0x8b, 0x11, 0x54, 0x9b, 0x6a, 0x5a, 0xad, 0x52, 0x58, 0xd6,
	0x89, 0x2e, 0x82, 0xd7, 0xc1, 0xac, 0xb9, 0x8c, 0x10, 0xe2, 0x58, 0x88, 0x9a, 0xa3, 0xa0, 0x33,
	0x3a, 0xbb, 0xae, 0x93, 0x70, 0x0d, 0x38, 0x42, 0x46, 0x32, 0x15, 0xb5, 0xe9, 0xa6, 0xd5, 0x9a,
	0x5d, 0xf1, 0xce, 0x12, 0xb8, 0xa5, 0x2a, 0x43, 0x83, 0x80, 0x77, 0x00, 0x30, 0x0b, 0xcf, 0x1b,
	0x28, 0x2b, 0x7c, 0x73, 0x04, 0x7f, 0xe4, 0x86, 0xac, 0xe3, 0x9b, 0xd9, 0x74, 0x51, 0x58, 0x61,
	0xc3, 0x70, 0xe5, 0x9d, 0x33, 0x5c, 0xc7, 0x96, 0xfe, 0x23, 0xf0, 0x21, 0x70, 0xee, 0x2b, 0xf3,
	0xc1, 0x05, 0x5f, 0xbb, 0xde, 0x1f, 0xda, 0xd9, 0xbf, 0x9b, 0x7f, 0x09, 0xb7, 0x3e, 0x42, 0xc0,
	0x59, 0xcf, 0xd7, 0xe5, 0xba, 0x33, 0x6f, 0xee, 0xed, 0xd7, 0x1f, 0xef, 0x6d, 0x00, 0xcb, 0xc6,
	0xc2, 0xaf, 0xa0, 0x04, 0x8e, 0xb6, 0x09, 0xbc, 0x31, 0x5e, 0xd9, 0x18, 0x13, 0xb9, 0x7f, 0xb3,
	0x65, 0xcf, 0x55, 0x5c, 0x55, 0xef, 0x3f, 0xf5, 0x2f, 0x8f, 0xec, 0x29, 0xd6, 0xac, 0x9b, 0x30,
	0x06, 0xc5, 0x7b, 0x58, 0xc2, 0x33, 0xdf, 0x39, 0x17, 0xd9, 0x92, 0x22, 0x5b, 0x80, 0xd5, 0x13,
	0x64, 0xc1, 0x6b, 0x82, 0xde, 0xc0, 0x67, 0xa0, 0x94, 0x9b, 0x76, 0xe2, 0xcc, 0x26, 0x2c, 0x75,
	0xd4, 0xe8, 0xde, 0xa2, 0x62, 0xf8, 0x1f, 0x9e, 0x94, 0x03, 0x33, 0xe0, 0x68, 0x17, 0x4f, 0x9a,
	0xe0, 0x18, 0x8f, 0x9f, 0x4b, 0x94, 0x3b, 0x5e, 0x94, 0x00, 0xc5, 0x30, 0x4d, 0x2e, 0x70, 0x86,
	0x9e, 0xa2, 0x5b, 0xf2, 0xdc, 0x71, 0x74, 0x81, 0x90, 0x11, 0x97, 0xf0, 0x05, 0x28, 0x6f, 0xd2,
	0x98, 0x0d, 0xb0, 0xc4, 0x17, 0xc8, 0x7c, 0x45, 0x31, 0xd7, 0xbd, 0x4b, 0x13, 0x98, 0x29, 0xdb,
	0xa8, 0x7e, 0x3e, 0x6c, 0x14, 0xbe, 0x1c, 0x36, 0x0a, 0xdf, 0x0e, 0x1b, 0x85, 0x83, 0xef, 0x8d,
	0xc2, 0x53, 0x3b, 0xeb, 0xec, 0x38, 0x6a, 0x91, 0xb7, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x52,
	0x98, 0x48, 0xef, 0x56, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	Create(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*StreamProfile, error)
	Get(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	Update(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*StreamProfile, error)
	Run(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error)
	Complete(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Create(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*StreamProfile, error) {
	out := new(StreamProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Get(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error) {
	out := new(StreamProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Update(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*StreamProfile, error) {
	out := new(StreamProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Run(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error) {
	out := new(StreamProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Complete(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamProfile, error) {
	out := new(StreamProfile)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.StreamService/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	Health(context.Context, *empty.Empty) (*rpc.HealthStatus, error)
	Create(context.Context, *CreateStreamRequest) (*StreamProfile, error)
	Get(context.Context, *StreamRequest) (*StreamProfile, error)
	List(context.Context, *empty.Empty) (*ListResponse, error)
	Update(context.Context, *UpdateStreamRequest) (*StreamProfile, error)
	Run(context.Context, *StreamRequest) (*StreamProfile, error)
	Complete(context.Context, *StreamRequest) (*StreamProfile, error)
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Create(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Get(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Update(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Run(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.StreamService/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Complete(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.streams.v1.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _StreamService_Health_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _StreamService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StreamService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StreamService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StreamService_Update_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _StreamService_Run_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _StreamService_Complete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streams/v1/stream_service.proto",
}
