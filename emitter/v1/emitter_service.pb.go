// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emitter/v1/emitter_service.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import rpc "github.com/VideoCoin/cloud-api/rpc"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamRequest struct {
	PipelineId           string   `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StreamId             uint64   `protobuf:"varint,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ClientAddress        string   `protobuf:"bytes,4,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_emitter_service_83586dc572a06e0e, []int{0}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (dst *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(dst, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *StreamRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *StreamRequest) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *StreamRequest) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamRequest)(nil), "cloud.api.streams.v1.StreamRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EmitterServiceClient is the client API for EmitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmitterServiceClient interface {
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	RequestStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ApproveStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type emitterServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmitterServiceClient(cc *grpc.ClientConn) EmitterServiceClient {
	return &emitterServiceClient{cc}
}

func (c *emitterServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.EmitterService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) RequestStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.EmitterService/RequestStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) ApproveStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.EmitterService/ApproveStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) CreateStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.EmitterService/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmitterServiceServer is the server API for EmitterService service.
type EmitterServiceServer interface {
	Health(context.Context, *empty.Empty) (*rpc.HealthStatus, error)
	RequestStream(context.Context, *StreamRequest) (*empty.Empty, error)
	ApproveStream(context.Context, *StreamRequest) (*empty.Empty, error)
	CreateStream(context.Context, *StreamRequest) (*empty.Empty, error)
}

func RegisterEmitterServiceServer(s *grpc.Server, srv EmitterServiceServer) {
	s.RegisterService(&_EmitterService_serviceDesc, srv)
}

func _EmitterService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.EmitterService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_RequestStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).RequestStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.EmitterService/RequestStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).RequestStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_ApproveStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).ApproveStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.EmitterService/ApproveStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).ApproveStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.EmitterService/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).CreateStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmitterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.streams.v1.EmitterService",
	HandlerType: (*EmitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _EmitterService_Health_Handler,
		},
		{
			MethodName: "RequestStream",
			Handler:    _EmitterService_RequestStream_Handler,
		},
		{
			MethodName: "ApproveStream",
			Handler:    _EmitterService_ApproveStream_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _EmitterService_CreateStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emitter/v1/emitter_service.proto",
}

func init() {
	proto.RegisterFile("emitter/v1/emitter_service.proto", fileDescriptor_emitter_service_83586dc572a06e0e)
}

var fileDescriptor_emitter_service_83586dc572a06e0e = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x51, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0x9e, 0x19, 0x97, 0xba, 0x1b, 0xed, 0x22, 0x61, 0xd1, 0x65, 0x2a, 0x63, 0xa9, 0x08, 0x7b,
	0x99, 0x84, 0xea, 0x2f, 0xa8, 0xcb, 0x82, 0x3d, 0xa8, 0xd0, 0x82, 0x07, 0x2f, 0x25, 0x9d, 0x3c,
	0xa7, 0x81, 0x99, 0x24, 0x26, 0x99, 0xc1, 0x7a, 0xf4, 0xee, 0xc9, 0x8b, 0x3f, 0xc9, 0xe3, 0x82,
	0x7f, 0x40, 0xaa, 0x3f, 0x44, 0x26, 0x99, 0x65, 0x57, 0xd4, 0x5b, 0x6f, 0x79, 0xef, 0xfb, 0xde,
	0xf7, 0xf2, 0xbe, 0x0f, 0x8d, 0xa1, 0x16, 0xce, 0x81, 0xa1, 0xed, 0x94, 0xf6, 0xcf, 0x95, 0x05,
	0xd3, 0x8a, 0x02, 0x88, 0x36, 0xca, 0x29, 0x7c, 0x52, 0x54, 0xaa, 0xe1, 0x84, 0x69, 0x41, 0xac,
	0x33, 0xc0, 0x6a, 0x4b, 0xda, 0x69, 0x3a, 0x2a, 0x95, 0x2a, 0x2b, 0xa0, 0x9e, 0xb3, 0x6e, 0xde,
	0x51, 0xa8, 0xb5, 0xdb, 0x86, 0x91, 0xf4, 0x61, 0x0f, 0x32, 0x2d, 0x28, 0x93, 0x52, 0x39, 0xe6,
	0x84, 0x92, 0xb6, 0x47, 0xf3, 0x52, 0xb8, 0x4d, 0xb3, 0x26, 0x85, 0xaa, 0x69, 0xa9, 0x4a, 0x75,
	0xad, 0xd1, 0x55, 0xbe, 0xf0, 0xaf, 0x9e, 0x4e, 0x6f, 0xd0, 0xdf, 0x08, 0x0e, 0xea, 0x5c, 0x09,
	0x49, 0xfd, 0xa7, 0xf2, 0x6e, 0x81, 0xd1, 0x05, 0xdd, 0x00, 0xab, 0xdc, 0xa6, 0x1f, 0x98, 0xdd,
	0x18, 0x00, 0xd9, 0xaa, 0xad, 0x36, 0xea, 0xc3, 0x36, 0x6c, 0x29, 0xf2, 0x12, 0x64, 0xde, 0xb2,
	0x4a, 0x70, 0xe6, 0x80, 0xfe, 0xf5, 0x08, 0x12, 0x93, 0xcf, 0x31, 0x1a, 0x2e, 0xfd, 0xb1, 0x0b,
	0x78, 0xdf, 0x80, 0x75, 0xf8, 0x11, 0xba, 0xa3, 0x85, 0x86, 0x4a, 0x48, 0x58, 0x09, 0x7e, 0x1a,
	0x8f, 0xe3, 0xb3, 0xa3, 0x05, 0xba, 0x6a, 0xcd, 0x39, 0x7e, 0x80, 0x6e, 0x37, 0x16, 0x4c, 0x07,
	0x26, 0x1e, 0x1c, 0x74, 0xe5, 0x9c, 0xe3, 0x11, 0x3a, 0x0a, 0xbe, 0x75, 0xd0, 0xad, 0x71, 0x7c,
	0x76, 0xb0, 0x38, 0x0c, 0x8d, 0x39, 0xc7, 0x4f, 0xd0, 0x71, 0x51, 0x09, 0x90, 0x6e, 0xc5, 0x38,
	0x37, 0x60, 0xed, 0xe9, 0x81, 0x1f, 0x1e, 0x86, 0xee, 0x2c, 0x34, 0x9f, 0x5e, 0x26, 0xe8, 0xf8,
	0x22, 0xa4, 0xb3, 0x0c, 0xe1, 0xe0, 0xd7, 0x68, 0xf0, 0xc2, 0x5f, 0x8d, 0xef, 0x93, 0x60, 0x37,
	0xb9, 0xf2, 0x91, 0x5c, 0x74, 0x59, 0xa4, 0x23, 0x72, 0x9d, 0x9c, 0xd1, 0x05, 0x09, 0xf4, 0xa5,
	0x63, 0xae, 0xb1, 0x93, 0x7b, 0x9f, 0xbe, 0xff, 0xfa, 0x92, 0x20, 0x7c, 0xd8, 0x7b, 0xf7, 0x11,
	0xbf, 0x42, 0xc3, 0xfe, 0xd8, 0x70, 0x39, 0x7e, 0x4c, 0xfe, 0x95, 0x3c, 0xf9, 0xc3, 0x97, 0xf4,
	0x3f, 0xcb, 0x27, 0x51, 0xa7, 0x37, 0xd3, 0xda, 0xa8, 0x16, 0xf6, 0xa3, 0xf7, 0x12, 0xdd, 0x3d,
	0x37, 0xc0, 0xdc, 0x7e, 0xe4, 0x9e, 0x9f, 0x7c, 0xdb, 0x65, 0xd1, 0xe5, 0x2e, 0x8b, 0x7e, 0xec,
	0xb2, 0xe8, 0xeb, 0xcf, 0x2c, 0x7a, 0x9b, 0xb4, 0xd3, 0xf5, 0xc0, 0xf3, 0x9e, 0xfd, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xd5, 0x0d, 0xcd, 0x8e, 0x17, 0x03, 0x00, 0x00,
}
