// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emitter/v1/emitter_service.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import rpc "github.com/VideoCoin/cloud-api/rpc"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestStreamIdResponse struct {
	StreamId             uint64   `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestStreamIdResponse) Reset()         { *m = RequestStreamIdResponse{} }
func (m *RequestStreamIdResponse) String() string { return proto.CompactTextString(m) }
func (*RequestStreamIdResponse) ProtoMessage()    {}
func (*RequestStreamIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_emitter_service_8c70ab03499820fa, []int{0}
}
func (m *RequestStreamIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestStreamIdResponse.Unmarshal(m, b)
}
func (m *RequestStreamIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestStreamIdResponse.Marshal(b, m, deterministic)
}
func (dst *RequestStreamIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStreamIdResponse.Merge(dst, src)
}
func (m *RequestStreamIdResponse) XXX_Size() int {
	return xxx_messageInfo_RequestStreamIdResponse.Size(m)
}
func (m *RequestStreamIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStreamIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStreamIdResponse proto.InternalMessageInfo

func (m *RequestStreamIdResponse) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *RequestStreamIdResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CreateStreamAddressRequest struct {
	StreamId             uint64   `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStreamAddressRequest) Reset()         { *m = CreateStreamAddressRequest{} }
func (m *CreateStreamAddressRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStreamAddressRequest) ProtoMessage()    {}
func (*CreateStreamAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_emitter_service_8c70ab03499820fa, []int{1}
}
func (m *CreateStreamAddressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateStreamAddressRequest.Unmarshal(m, b)
}
func (m *CreateStreamAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateStreamAddressRequest.Marshal(b, m, deterministic)
}
func (dst *CreateStreamAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamAddressRequest.Merge(dst, src)
}
func (m *CreateStreamAddressRequest) XXX_Size() int {
	return xxx_messageInfo_CreateStreamAddressRequest.Size(m)
}
func (m *CreateStreamAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamAddressRequest proto.InternalMessageInfo

func (m *CreateStreamAddressRequest) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

type StreamAddress struct {
	StreamAddress        string   `protobuf:"bytes,1,opt,name=stream_address,json=streamAddress,proto3" json:"stream_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamAddress) Reset()         { *m = StreamAddress{} }
func (m *StreamAddress) String() string { return proto.CompactTextString(m) }
func (*StreamAddress) ProtoMessage()    {}
func (*StreamAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_emitter_service_8c70ab03499820fa, []int{2}
}
func (m *StreamAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamAddress.Unmarshal(m, b)
}
func (m *StreamAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamAddress.Marshal(b, m, deterministic)
}
func (dst *StreamAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamAddress.Merge(dst, src)
}
func (m *StreamAddress) XXX_Size() int {
	return xxx_messageInfo_StreamAddress.Size(m)
}
func (m *StreamAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamAddress.DiscardUnknown(m)
}

var xxx_messageInfo_StreamAddress proto.InternalMessageInfo

func (m *StreamAddress) GetStreamAddress() string {
	if m != nil {
		return m.StreamAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestStreamIdResponse)(nil), "cloud.api.streams.v1.RequestStreamIdResponse")
	proto.RegisterType((*CreateStreamAddressRequest)(nil), "cloud.api.streams.v1.CreateStreamAddressRequest")
	proto.RegisterType((*StreamAddress)(nil), "cloud.api.streams.v1.StreamAddress")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EmitterServiceClient is the client API for EmitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmitterServiceClient interface {
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	RequestStreamId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RequestStreamIdResponse, error)
	CreateStreamAddress(ctx context.Context, in *CreateStreamAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type emitterServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmitterServiceClient(cc *grpc.ClientConn) EmitterServiceClient {
	return &emitterServiceClient{cc}
}

func (c *emitterServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.EmitterService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) RequestStreamId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RequestStreamIdResponse, error) {
	out := new(RequestStreamIdResponse)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.EmitterService/RequestStreamId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) CreateStreamAddress(ctx context.Context, in *CreateStreamAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloud.api.streams.v1.EmitterService/CreateStreamAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmitterServiceServer is the server API for EmitterService service.
type EmitterServiceServer interface {
	Health(context.Context, *empty.Empty) (*rpc.HealthStatus, error)
	RequestStreamId(context.Context, *empty.Empty) (*RequestStreamIdResponse, error)
	CreateStreamAddress(context.Context, *CreateStreamAddressRequest) (*empty.Empty, error)
}

func RegisterEmitterServiceServer(s *grpc.Server, srv EmitterServiceServer) {
	s.RegisterService(&_EmitterService_serviceDesc, srv)
}

func _EmitterService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.EmitterService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_RequestStreamId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).RequestStreamId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.EmitterService/RequestStreamId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).RequestStreamId(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_CreateStreamAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).CreateStreamAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.api.streams.v1.EmitterService/CreateStreamAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).CreateStreamAddress(ctx, req.(*CreateStreamAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmitterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.api.streams.v1.EmitterService",
	HandlerType: (*EmitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _EmitterService_Health_Handler,
		},
		{
			MethodName: "RequestStreamId",
			Handler:    _EmitterService_RequestStreamId_Handler,
		},
		{
			MethodName: "CreateStreamAddress",
			Handler:    _EmitterService_CreateStreamAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emitter/v1/emitter_service.proto",
}

func init() {
	proto.RegisterFile("emitter/v1/emitter_service.proto", fileDescriptor_emitter_service_8c70ab03499820fa)
}

var fileDescriptor_emitter_service_8c70ab03499820fa = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcf, 0x8a, 0xd4, 0x30,
	0x18, 0x6f, 0x8b, 0xac, 0xbb, 0x81, 0x5d, 0x25, 0x2e, 0x3a, 0x74, 0xa4, 0x0c, 0x05, 0x61, 0x2f,
	0x4d, 0x1c, 0x05, 0xc1, 0xe3, 0xba, 0x2c, 0xe8, 0x49, 0xe9, 0x80, 0x87, 0xbd, 0x2c, 0x99, 0xf6,
	0xb3, 0x13, 0x68, 0x9b, 0x98, 0xa4, 0xc5, 0xf1, 0xe8, 0x2b, 0x78, 0xf1, 0xe8, 0xe3, 0x78, 0x14,
	0x7c, 0x01, 0x19, 0x7d, 0x10, 0x99, 0x24, 0xc3, 0x8c, 0x3a, 0xdd, 0xdb, 0xf7, 0x35, 0xbf, 0x3f,
	0xe9, 0xef, 0x17, 0x34, 0x81, 0x86, 0x1b, 0x03, 0x8a, 0xf6, 0x53, 0xea, 0xc7, 0x6b, 0x0d, 0xaa,
	0xe7, 0x05, 0x10, 0xa9, 0x84, 0x11, 0xf8, 0xb4, 0xa8, 0x45, 0x57, 0x12, 0x26, 0x39, 0xd1, 0x46,
	0x01, 0x6b, 0x34, 0xe9, 0xa7, 0xf1, 0xb8, 0x12, 0xa2, 0xaa, 0x81, 0x5a, 0xcc, 0xbc, 0x7b, 0x47,
	0xa1, 0x91, 0x66, 0xe9, 0x28, 0xf1, 0x43, 0x7f, 0xc8, 0x24, 0xa7, 0xac, 0x6d, 0x85, 0x61, 0x86,
	0x8b, 0x56, 0xfb, 0xd3, 0xac, 0xe2, 0x66, 0xd1, 0xcd, 0x49, 0x21, 0x1a, 0x5a, 0x89, 0x4a, 0x6c,
	0x35, 0xd6, 0x9b, 0x5d, 0xec, 0xe4, 0xe1, 0x74, 0x07, 0xfe, 0x96, 0x97, 0x20, 0x2e, 0x04, 0x6f,
	0xa9, 0xbd, 0x54, 0xb6, 0x36, 0x50, 0xb2, 0xa0, 0x0b, 0x60, 0xb5, 0x59, 0x78, 0xc2, 0xf9, 0x0e,
	0x01, 0xda, 0x5e, 0x2c, 0xa5, 0x12, 0x1f, 0x96, 0xce, 0xa5, 0xc8, 0x2a, 0x68, 0xb3, 0x9e, 0xd5,
	0xbc, 0x64, 0x06, 0xe8, 0x7f, 0x83, 0x93, 0x48, 0xdf, 0xa0, 0x07, 0x39, 0xbc, 0xef, 0x40, 0x9b,
	0x99, 0xfd, 0xe5, 0x57, 0x65, 0x0e, 0x5a, 0x8a, 0x56, 0x03, 0x1e, 0xa3, 0x23, 0x17, 0xc3, 0x35,
	0x2f, 0x47, 0xe1, 0x24, 0x3c, 0xbb, 0x95, 0x1f, 0x6a, 0x0f, 0xc2, 0x23, 0x74, 0x9b, 0x95, 0xa5,
	0x02, 0xad, 0x47, 0xd1, 0x24, 0x3c, 0x3b, 0xca, 0x37, 0x6b, 0xfa, 0x1c, 0xc5, 0x17, 0x0a, 0x98,
	0x01, 0x27, 0x78, 0xee, 0x3e, 0x7b, 0x93, 0x1b, 0x45, 0xd3, 0x67, 0xe8, 0xf8, 0x2f, 0x12, 0x7e,
	0x84, 0x4e, 0x3c, 0x7a, 0x63, 0x16, 0x5a, 0xb3, 0x63, 0xbd, 0x0b, 0x7b, 0xf2, 0x35, 0x42, 0x27,
	0x97, 0xae, 0xd2, 0x99, 0x6b, 0x14, 0xbf, 0x46, 0x07, 0x2f, 0x6d, 0x54, 0xf8, 0x3e, 0x71, 0x1d,
	0x91, 0x4d, 0xf8, 0xe4, 0x72, 0x5d, 0x60, 0x3c, 0x26, 0xdb, 0xba, 0x95, 0x2c, 0x88, 0x83, 0xcf,
	0x0c, 0x33, 0x9d, 0x4e, 0xef, 0x7e, 0xfa, 0xf1, 0xfb, 0x73, 0x84, 0xf0, 0xa1, 0x0f, 0xfc, 0x23,
	0xbe, 0x42, 0x77, 0xfe, 0x09, 0x6a, 0x50, 0x39, 0x23, 0xfb, 0x1e, 0x12, 0x19, 0xc8, 0x39, 0x0d,
	0x30, 0x43, 0xf7, 0xf6, 0x44, 0x86, 0x1f, 0xef, 0xd7, 0x19, 0x4e, 0x37, 0x1e, 0xb8, 0x51, 0x1a,
	0xbc, 0x38, 0xfd, 0xb6, 0x4a, 0x82, 0xef, 0xab, 0x24, 0xf8, 0xb9, 0x4a, 0x82, 0x2f, 0xbf, 0x92,
	0xe0, 0x2a, 0xea, 0xa7, 0xf3, 0x03, 0x8b, 0x7b, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0xef, 0x99,
	0x54, 0x43, 0x1c, 0x03, 0x00, 0x00,
}
