// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: emitter/v1/emitter_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on RequestStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestStreamRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAccountId()) != 36 {
		return RequestStreamRequestValidationError{
			field:  "AccountId",
			reason: "value length must be 36 runes",
		}

	}

	return nil
}

// RequestStreamRequestValidationError is the validation error returned by
// RequestStreamRequest.Validate if the designated constraints aren't met.
type RequestStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestStreamRequestValidationError) ErrorName() string {
	return "RequestStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestStreamRequestValidationError{}

// Validate checks the field values on RequestStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestStreamResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StreamId

	// no validation rules for Address

	return nil
}

// RequestStreamResponseValidationError is the validation error returned by
// RequestStreamResponse.Validate if the designated constraints aren't met.
type RequestStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestStreamResponseValidationError) ErrorName() string {
	return "RequestStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestStreamResponseValidationError{}

// Validate checks the field values on CreateStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStreamRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAccountId()) != 36 {
		return CreateStreamRequestValidationError{
			field:  "AccountId",
			reason: "value length must be 36 runes",
		}

	}

	// no validation rules for StreamId

	return nil
}

// CreateStreamRequestValidationError is the validation error returned by
// CreateStreamRequest.Validate if the designated constraints aren't met.
type CreateStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStreamRequestValidationError) ErrorName() string {
	return "CreateStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStreamRequestValidationError{}

// Validate checks the field values on CreateStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateStreamResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StreamAddress

	return nil
}

// CreateStreamResponseValidationError is the validation error returned by
// CreateStreamResponse.Validate if the designated constraints aren't met.
type CreateStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStreamResponseValidationError) ErrorName() string {
	return "CreateStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStreamResponseValidationError{}
